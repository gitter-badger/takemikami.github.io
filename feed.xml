<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>takemikami&#39;s note</title>
    <description>読書記録やオリジナル文芸創作（小説、詩、エッセイなど）、IT技術の個人的なノート、 その他にコラムや日記を書き綴っている、takemikami個人運営のブログです。
</description>
    <link>http://takemikami.com/</link>
    <atom:link href="http://takemikami.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 18 Sep 2014 05:37:09 +0900</pubDate>
    <lastBuildDate>Thu, 18 Sep 2014 05:37:09 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Rails製ECサイトのSpreeCommerceをインストールしてみた手順</title>
        <description>&lt;p&gt;SpreeCommerceというRailsで作られたECサイトのオープンソースパッケージがあったので、インストールして少しだけ設定してみました。&lt;/p&gt;

&lt;p&gt;SpreeCommerce&lt;br&gt;
　&lt;a href=&quot;https://github.com/spree/spree&quot;&gt;https://github.com/spree/spree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;空のRailsアプリを作って、そこに認証機能(Devise)をインストール、SpreeCommerce本体をインストール、認証機能との連携、国際化、商品作成、PayPalプラグインを追加という流れでセットアップします。&lt;/p&gt;

&lt;h1&gt;Railsアプリの作成&lt;/h1&gt;

&lt;p&gt;以下のコマンドのようにして、さらっとRailsアプリの基本を作ります。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;source &amp;#39;https://rubygems.org&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gem &amp;#39;rails&amp;#39;, &amp;#39;4.1.4&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails new . --skip-bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm Gemfile.lock
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;認証機能(devise)のインストール&lt;/h1&gt;

&lt;p&gt;認証機能もつけたいのでdeviseをインストールします。以下のdeviseのページに書かれている流れの通り、さらっと設定します。&lt;/p&gt;

&lt;p&gt;devise&lt;br&gt;
　&lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;https://github.com/plataformatec/devise&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gem &amp;#39;devise&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails generate devise:install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails generate devise User
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;に以下を追記しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ひとまず、&lt;code&gt;bundle exec rails s&lt;/code&gt;で起動し、&lt;code&gt;http://localhost:3000/users/sign_in&lt;/code&gt;でログイン画面が表示されることを確認しておきます。&lt;/p&gt;

&lt;h1&gt;SpreeCommerce本体のインストール&lt;/h1&gt;

&lt;p&gt;ここまで来れば、次はいよいよSpreeCommerceのインストールです。
&lt;code&gt;Gemfile&lt;/code&gt;にSpree本体のgemを追記します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree/spree&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2-3-stable&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bundle installの実行及びSpreeのインストールを実行します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g spree:install --sample&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --seed&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この状態で、&lt;code&gt;bundle exec rails s&lt;/code&gt;で起動して&lt;code&gt;http://localhost:3000/&lt;/code&gt;にアクセスすると、商品等何も無い状態のページが表示出来ます。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;画面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;※この手順では実施しませんが、以下を入力するとサンプルデータを投入できます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec rake db:seed
$ bundle exec rake spree_sample:load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;カスタム認証(deviseと連携する)&lt;/h1&gt;

&lt;p&gt;SpreeCommerceと認証機能との連携については、以下のSpreeCommerceのドキュメントに手順が説明されているので、この記事に従って、設定します。&lt;/p&gt;

&lt;p&gt;Custome Authentication - Developer Guide&lt;br&gt;
　&lt;a href=&quot;http://guides.spreecommerce.com/developer/authentication.html&quot;&gt;http://guides.spreecommerce.com/developer/authentication.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DeviseのユーザテーブルにSpreeCommerceで利用するカラムを追加します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec rails g spree:custom_user User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SpreeCommerceと連携させるモデルの名称を設定ファイル&lt;code&gt;config/initializers/spree.rb&lt;/code&gt;で指定します。変更前は「Spree::LegacyUser」になっています。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Spree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lib/spree/authentication_helpers.rb&lt;/code&gt;をdeviseのユーザモデル名に変更します。本エントリの手順の場合は変更不要ですが、ユーザのモデル名を「User」以外に設定した場合は、次の部分の&lt;code&gt;current_user&lt;/code&gt;を変更します。例えばモデル名をPersonにした場合はcurrent_personにする。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    def spree_current_user
      current_user
    end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;config/routes.rb&lt;/code&gt;で、SpreeCommerceの遷移先パスの接続先をDeviseのコントローラに向けます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;devise_scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;devise/sessions#new&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/signup&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;devise/registrations#new&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;devise/sessions#destroy&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ヘッダのナビバーにログイン状態表示・ログイン・ログアウトボタンを表示するビューを追加します。Defaceというもので、元のビューに内容を追加したり、置き換えたりすることが出来まます。ここでは、Defaceの差し込み機能を使って、ナビバーに必要な情報を追加します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/overrides/auth_login_bar.rb&lt;/code&gt;で、差し込み部分・差し込むビューを定義。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Deface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:virtual_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;spree/shared/_nav_bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;auth_shared_login_bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:insert_before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;li#search-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:partial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;spree/shared/login_bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;eb3fa668cd98b6a1c75c36420ef1b238a1fc55ad&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/views/spree/shared/_login_bar.html.erb&lt;/code&gt;で差し込むビューを定義。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spree_current_user&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= link_to Spree.t(:logout), spree_logout_path, :method =&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delete&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% else %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= link_to Spree.t(:login), spree_login_path %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;    &amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Spree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spree_signup_path&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% end &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまで設定したら、以下のコマンドでDBにカラムを追加しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;管理者ユーザの追加&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;bundle exec rails s&lt;/code&gt;でアプリを起動し、&lt;code&gt;http://localhost:3000/sign_up&lt;/code&gt;から、メールアドレス・パスワードを指定して、ユーザを登録します。&lt;/p&gt;

&lt;p&gt;以下のようにコマンドを入力して、登録したユーザに管理権限を設定します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails c
&amp;gt; &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; User.find_by&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;email: &lt;span class=&quot;s2&quot;&gt;&amp;quot;※登録したメールアドレス※&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;gt; user.spree_roles &amp;lt;&amp;lt; Spree::Role.find_or_create_by&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name: &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;http://localhost:3000/admin&lt;/code&gt;にアクセスして管理画面を、と思ったらエラーが出てますね。。。&lt;/p&gt;

&lt;p&gt;エラーメッセージとソース見てみた感じ、以下の内容で&lt;code&gt;app/assets/stylesheets/spree/backend/globals/_variables_override.scss&lt;/code&gt;というファイルを追加したら、管理画面が表示されました。（こういう仕様では無いような気がするので、すぐに解消されるような気がしますが。）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$color-ste-success-bg:         #FFFFFF !default;
$color-ste-notice-bg:          #FFFFFF !default;
$color-ste-error-bg:           #FFFFFF !default;

$color-ste-success-text:       #6788A2 !default;
$color-ste-notice-text:        #6788A2 !default;
$color-ste-error-text:         #6788A2 !default;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再び&lt;code&gt;http://localhost:3000/admin&lt;/code&gt;にアクセスすると、管理画面が出てきました。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;画面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;国際化モジュール(spree_i18n)のインストール&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にSpree国際化モジュールのgemを追記します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree_i18n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree/spree_i18n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2-3-stable&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bundle installの実行及びおよび国際化モジュールのインストールを行います。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g spree_i18n:install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;config/application.rb&lt;/code&gt;に日本語ロケールを指定しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i18n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_locale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ja&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;管理画面も日本語になりました。（※railsの再起動必要です）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;画面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;商品の作成&lt;/h1&gt;

&lt;p&gt;それでは、何か購入出来るように管理画面から商品を作ります。&lt;/p&gt;

&lt;h2&gt;通貨の設定&lt;/h2&gt;

&lt;p&gt;設定→一般で、以下の内容を設定して更新。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通貨の設定 - 通貨の選択：JapaneseYen(JPY)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;ゾーンの作成&lt;/h2&gt;

&lt;p&gt;設定→国→「＋NEW COUNTRY」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本&lt;/li&gt;
&lt;li&gt;ISO名：JP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定→ゾーン→「＋新規ゾーン」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本&lt;/li&gt;
&lt;li&gt;支払い方法：国による区別&lt;/li&gt;
&lt;li&gt;デフォルトのタックスゾーン：チェックあり&lt;/li&gt;
&lt;li&gt;国：日本&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;税金の作成&lt;/h2&gt;

&lt;p&gt;設定→税金カテゴリ→「＋新規税金カテゴリ」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：消費税&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定→税率→「＋新規税率」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：消費税（税込）&lt;/li&gt;
&lt;li&gt;比率：8&lt;/li&gt;
&lt;li&gt;価格に含まれる：チェックあり&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;配送方法の作成&lt;/h2&gt;

&lt;p&gt;設定→配送カテゴリ→「＋新規配送カテゴリ」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本国内配送&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定→配送方法→「＋新規配送方法」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本国内配送&lt;/li&gt;
&lt;li&gt;配送カテゴリ：日本国内配送&lt;/li&gt;
&lt;li&gt;ゾーン：日本&lt;/li&gt;
&lt;li&gt;計算方法：一定

&lt;ul&gt;
&lt;li&gt;金額：1000&lt;/li&gt;
&lt;li&gt;通貨：JPY&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;税金：消費税（税込）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;商品の作成&lt;/h2&gt;

&lt;p&gt;商品管理→プロトタイプ→「＋新規プロトタイプ」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;p&gt;名称：書籍&lt;/p&gt;

&lt;p&gt;商品管理→「＋新規商品」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：面白い本&lt;/li&gt;
&lt;li&gt;定価：5000&lt;/li&gt;
&lt;li&gt;発売開始日・入荷日：本日以前&lt;/li&gt;
&lt;li&gt;Slug：HON-001&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と思ったら、商品作ろうとするとslugが必須とエラーが出て商品が作れないですね(^_^;　とりあえず、以下のファイルを直接修正して、slugの入力欄を足しておきます。むりやりですが。。。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vendor/bundle/ruby/2.1.0/bundler/gems/spree-458e1cb3b6c1/backend/app/views/spree/admin/products/new.html.erb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    &amp;lt;div class=&amp;#39;row&amp;#39;&amp;gt;
    &amp;lt;div data-hook=&amp;quot;admin_product_form_slug&amp;quot;&amp;gt;
      &amp;lt;%= f.field_container :slug do %&amp;gt;
        &amp;lt;%= f.label :slug, raw(Spree.t(:slug) + content_tag(:span, &amp;#39; *&amp;#39;,  :class =&amp;gt; &amp;quot;required&amp;quot;)) %&amp;gt;
        &amp;lt;%= f.text_field :slug, :class =&amp;gt; &amp;#39;fullwidth title&amp;#39; %&amp;gt;
        &amp;lt;%= f.error_message_on :slug %&amp;gt;
      &amp;lt;% end %&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまで設定して、&lt;code&gt;http://localhost:3000/&lt;/code&gt;を開くと、登録した商品が表示されます。カートには投入できますが、支払い方法が存在しないので、まだ購入完了まで進めません。&lt;/p&gt;

&lt;h1&gt;Paypalとの決済連携モジュールをインストール&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にSpreeのPaypal支払いモジュールのgemを追記します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree_paypal_express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree-contrib/better_spree_paypal_express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2-3-stable&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bundle installとテーブル追加を行います。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g spree_paypal_express:install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Paypalとの決済連携設定&lt;/h1&gt;

&lt;p&gt;支払い方法を設定しますが、その前にPayPalのSandboxアカウントを作成しておきます。sandbox用アカウントはPaypalDevelperから作成出来ます。Dashbord→Sandbox:AccountってところでCreateAccountでBusinessタイプを作成して、APIcredentialsってところに出てくる情報を控えておきます。&lt;/p&gt;

&lt;p&gt;PayPalDevleoper&lt;br&gt;
　&lt;a href=&quot;https://developer.paypal.com&quot;&gt;https://developer.paypal.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;設定→支払い方法→「＋支払い方法を追加」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロバイダー：Spree::PaypalGatewayExpress&lt;/li&gt;
&lt;li&gt;名称：Paypal&lt;/li&gt;
&lt;li&gt;ログイン、パスワード、SIGNATURE：先ほど作成したSandboxアカウントの値&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここまで設定すると、&lt;code&gt;http://localhost:3000/&lt;/code&gt;から商品を購入することが出来ます（本当にとりあえずですが）。。
テストで商品購入と試すときはPayPalに遷移したときURLが&lt;code&gt;https://www.sandbox.paypal.com&lt;/code&gt;のようにsandboxとなっているかは確認しておきましょう。。&lt;/p&gt;

&lt;p&gt;開発がアクティブなので、運用に使うにはきちんとテストと手直しが必要ですが、ある程度Rails分かる人なら、十分使えそうな気がしました。&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Sep 2014 05:34:20 +0900</pubDate>
        <link>http://takemikami.com/2014/09/18/RailsECSpreeCommerce.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/18/RailsECSpreeCommerce.html</guid>
        
        <category>spree</category>
        
        <category>ec</category>
        
        <category>rails</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>Railsアプリのエラー発生をHeroku上のerrbitで監視する手順</title>
        <description>&lt;p&gt;このエントリでは、RailsアプリのエラーをErrbitで監視する手順の作業ログをまとめています。Errbitではエラーの監視を行うことができます。ErrbitはAirbrakeというサービスのオープンソース版で、この手順ではErrbitをHerokuにセットアップすることにします。&lt;/p&gt;

&lt;p&gt;errbit&lt;br&gt;
　&lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;https://github.com/errbit/errbit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Airbrake&lt;br&gt;
　&lt;a href=&quot;https://airbrake.io&quot;&gt;https://airbrake.io&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;ErrBitのセットアップ&lt;/h1&gt;

&lt;p&gt;以下のerrbitのページ「Deploying to Heroku:」という部分に手順が書いてあるので、この通りに実施します。&lt;/p&gt;

&lt;p&gt;errbit&lt;br&gt;
　&lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;https://github.com/errbit/errbit&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;PC上での準備&lt;/h2&gt;

&lt;p&gt;PCにruby,bundlerはセットアップされている前提で、errbitのcloneとbundle installを実行します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone http://github.com/errbit/errbit.git
$ cd errbit
$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;db/seeds.rb&lt;/code&gt;を修正します。以下の３点を自分用に変更。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;*** 省略 ***
admin_username = &amp;quot;errbit&amp;quot;
admin_email = &amp;quot;errbit@#{Errbit::Config.host}&amp;quot;
admin_pass  = &amp;#39;password&amp;#39;
*** 省略 ***
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正したらcommitしておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git commit db/seeds.rb -m &amp;quot;setup admin id/password&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;herokuへの登録&lt;/h2&gt;

&lt;p&gt;herokuへのユーザ登録・クレジットカード登録・heroku Toolbeltはセットアップは出来ている前提で、以下のようにコマンドを入力してherokuに、errbitをデプロイします。（※ここでは無料のAdd-onを利用しているので基本的に費用はかからないはず）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ heroku login
$ heroku create ※設定したいアプリ名（省略してもOK）※
$ heroku addons:add mongolab:sandbox
$ heroku addons:add sendgrid:starter
$ heroku config:add HEROKU=true
$ heroku config:add SECRET_TOKEN=&amp;quot;$(bundle exec rake secret)&amp;quot;
$ heroku config:add ERRBIT_HOST=※errbitのホスト名※
$ heroku config:add ERRBIT_EMAIL_FROM=※通知メールの送信元※
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでHeroku上のDBにシードデータ登録・インデックス生成します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ heroku run rake db:seed
$ heroku run rake db:mongoid:create_indexes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;herokuのDBを無料範囲内で利用するために、定期的に対応済みエラーをクリアするスケジューラーを追加しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ heroku addons:add scheduler:standard
$ heroku addons:open scheduler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;heroku Schedulerの設定画面が出てくるので、Add Jobを選んでtaskに&lt;code&gt;rake errbit:db:clear_resolved&lt;/code&gt;を指定します。&lt;/p&gt;

&lt;p&gt;ここまで設定してから、HerokuのアプリのURLにアクセスすると次のような画面が出てくるので、設定した管理ユーザでログインします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5579/15080651199_97f646de03.jpg&quot; alt=&quot;errbit-login&quot;&gt;&lt;/p&gt;

&lt;p&gt;ログイン後の画面はこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3918/15267383235_7fd9a32cd1.jpg&quot; alt=&quot;errbi-start&quot;&gt;&lt;/p&gt;

&lt;p&gt;この画面の「AddNewApp」からRailsアプリを追加していきますが、そこから先はRailsのアプリを作った後で実施します。&lt;/p&gt;

&lt;h1&gt;監視対象のRailsアプリを作る&lt;/h1&gt;

&lt;h2&gt;Railsアプリの準備&lt;/h2&gt;

&lt;p&gt;以下のコマンドのようにして、Railsアプリの基本を作ります。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir sample
$ cd sample
$ echo &amp;quot;source &amp;#39;https://rubygems.org&amp;#39;&amp;quot; &amp;gt; Gemfile
$ echo &amp;quot;gem &amp;#39;rails&amp;#39;&amp;quot; &amp;gt;&amp;gt; Gemfile
$ bundle install --path vendor/bundle
$ bundle exec rails new . --skip-bundle
$ rm Gemfile.lock
$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;RailsアプリへのErrbitの設定&lt;/h2&gt;

&lt;p&gt;Errbitの管理画面「AddNewApp」から、アプリ名を指定してアプリを作成します（それ以外は、ひとまず既定値で）。作成後画面の「No errs have been caught yet, make sure you setup your app」に、Railsアプリに設定すべき情報が表示されます。&lt;/p&gt;

&lt;p&gt;作成後の画面に表示されている内容で&lt;code&gt;config/initializers/errbit.rb&lt;/code&gt;を作成し。また、&lt;code&gt;Gemfile&lt;/code&gt;に以下を追記。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem &amp;#39;airbrake&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gemを追加したので、bundle installしておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Errbitの動作確認&lt;/h2&gt;

&lt;p&gt;ここで、次のコマンドを入力すると動作確認を行うことが出来ます。このコマンドを入力した後、errbitの画面を見ると以下のようにエラーが発生している事が確認できます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec rake airbrake:test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5557/15244382906_7d7f632df5.jpg&quot; alt=&quot;errbit-err&quot;&gt;&lt;/p&gt;

&lt;h2&gt;slackへのエラー通知&lt;/h2&gt;

&lt;p&gt;エラー発生時にslackにも通知するように設定してみます。slackへのユーザ登録は出来ている前提で、手順を記載します。&lt;/p&gt;

&lt;p&gt;Slackの「Configure Integrations」で「Integration」の設定画面に行き、「Incoming Webhooks」を追加します。ここで生成されるTOKEN文字列をコピーしておきます。（左側のno「REGENERATE TOKEN」ボタンの上側に出ている文字列です）&lt;/p&gt;

&lt;p&gt;次にerrbitのアプリ設定画面の「NOTIFICATION SERVICE」のところで、「SLACK」を選び、「SUBDOMAIN」「TOKEN」「ROOM」を指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5576/15080685530_2f863d1c20.jpg&quot; alt=&quot;errbit-slack&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SUBDOMAIN: 自分が使っているチャット画面の「[subdomain].slack.com」の「[subdomain]」の部分を指定&lt;/li&gt;
&lt;li&gt;TOKEN: 先ほどの生成した文字列&lt;/li&gt;
&lt;li&gt;ROOM: 通知したいCHANNELを指定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定後にもう一度、&lt;code&gt;bundle exec rake airbrake:test&lt;/code&gt;すると、slackへのエラー通知が確認出来ます。&lt;/p&gt;

&lt;p&gt;この手順でerrbitを構築して開発サーバ等に仕込んでおけば、開発時のバグ消化などがスムーズにできるのでは無いかなと思いました。（もちろん、本番環境のエラー管理にも利用すべきですが）&lt;/p&gt;

&lt;p&gt;以上。。&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Sep 2014 22:20:51 +0900</pubDate>
        <link>http://takemikami.com/2014/09/17/RailsHerokuerrbit.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/17/RailsHerokuerrbit.html</guid>
        
        <category>heroku</category>
        
        <category>errbit</category>
        
        <category>rails</category>
        
        <category>slack</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>blog用にjekyllを設定したメモ</title>
        <description>&lt;p&gt;このブログをjekyllで生成するにあたって、プラグインとかいろいろと調べたので、このエントリにまとめておきます。&lt;/p&gt;

&lt;h1&gt;基本的なこと&lt;/h1&gt;

&lt;h2&gt;jekyllのプラグイン機能って？&lt;/h2&gt;

&lt;p&gt;jekyllにはプラグイン機能があり、いろいろとサイト生成の挙動を拡張できます。作成したプラグインは&lt;code&gt;_plugins&lt;/code&gt;ディレクトリに配置して利用します。以下のページの「Available Plugins」というところで、利用できるプラグインも紹介されています。&lt;/p&gt;

&lt;p&gt;プラグイン機能の説明： &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;http://jekyllrb.com/docs/plugins/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Liquidって？&lt;/h2&gt;

&lt;p&gt;jekyllではLiquidというテンプレートエンジンを利用しています。基本的には、変数の表示：&lt;code&gt;{{ variable }}&lt;/code&gt;、機能の実行：&lt;code&gt;{% function %}&lt;/code&gt;で、テンプレートを作成していきます。Liquidの文法などは次のページに説明があります。&lt;/p&gt;

&lt;p&gt;Liquid Documentaion：  &lt;a href=&quot;http://docs.shopify.com/themes/liquid-documentation/basics&quot;&gt;http://docs.shopify.com/themes/liquid-documentation/basics&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;設定したこと&lt;/h1&gt;

&lt;p&gt;jekyllとか関係ないこともありますが、ブログを生成する際に設定したことをずらっと並べていきます。&lt;/p&gt;

&lt;h2&gt;アイコンを利用する&lt;/h2&gt;

&lt;p&gt;このブログでは、 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt; などのアイコンを利用していますが、これはFont Awesomeというツールキットのアイコンです。以下のプラグインを使えばLiquidのタグでアイコンを表示出来るようになります。&lt;/p&gt;

&lt;p&gt;アイコンを表示するプラグイン： &lt;a href=&quot;http://ryancmorrissey.com/blog/2014/01/25/font-awesome-icons-jekyll-tag-plugin/&quot;&gt;http://ryancmorrissey.com/blog/2014/01/25/font-awesome-icons-jekyll-tag-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Font Awesomeについて： &lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot;&gt;http://fortawesome.github.io/Font-Awesome/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アイコンの一覧：　&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/icons/&quot;&gt;http://fortawesome.github.io/Font-Awesome/icons/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;一覧をページングする&lt;/h2&gt;

&lt;p&gt;一覧ページをページングする場合は、次のページの方法で設定します。&lt;/p&gt;

&lt;p&gt;Pagination: &lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot;&gt;http://jekyllrb.com/docs/pagination/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;タグページを作る&lt;/h2&gt;

&lt;p&gt;タグページ（タグ毎の投稿一覧ページ）を作成する場合は、次のプラグインを利用します。このプラグインでタグクラウドも生成出来ます。&lt;/p&gt;

&lt;p&gt;jekyll-tagginプラグイン：&lt;a href=&quot;https://github.com/pattex/jekyll-tagging&quot;&gt;https://github.com/pattex/jekyll-tagging&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;カテゴリページを作る&lt;/h2&gt;

&lt;p&gt;カテゴリページ（カテゴリ毎の投稿一覧ページ）は、次のページを参考に作成しました。
 jekyllのカテゴリページ：&lt;a href=&quot;http://count0.org/2013/07/04/jekyll-category-page.html&quot;&gt;http://count0.org/2013/07/04/jekyll-category-page.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;サイトマップを作る&lt;/h2&gt;

&lt;p&gt;サイトマップ（検索エンジンに読み込ませるためのサイトマップ）は、次のプラグインで生成できます。&lt;/p&gt;

&lt;p&gt;Jekyll Plugin: sitemap.xml Generator : &lt;a href=&quot;https://github.com/kinnetica/jekyll-plugins&quot;&gt;https://github.com/kinnetica/jekyll-plugins&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Liquidのテンプレートを無効にする&lt;/h2&gt;

&lt;p&gt;投稿の本文に&lt;code&gt;{{ variable }}&lt;/code&gt;のような記載があるとLiquidのタグとして処理され困ることがあるので、これを回避するために以下のプラグインで無効化出来るようにします。&lt;/p&gt;

&lt;p&gt;Raw tag for jekyll:  &lt;a href=&quot;https://gist.github.com/phaer/1020852&quot;&gt;https://gist.github.com/phaer/1020852&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;数式を表示する&lt;/h2&gt;

&lt;p&gt;数式の表示にはMathJaxを利用します。これでLaTexライクに数式が利用できます。以下はjekyllでの設定方法と、MathJax自体のドキュメントです。&lt;/p&gt;

&lt;p&gt;MathJax with Jekyll: &lt;a href=&quot;http://gastonsanchez.com/blog/opinion/2014/02/16/Mathjax-with-jekyll.html&quot;&gt;http://gastonsanchez.com/blog/opinion/2014/02/16/Mathjax-with-jekyll.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MathJax Documentation: &lt;a href=&quot;http://docs.mathjax.org/en/latest/index.html&quot;&gt;http://docs.mathjax.org/en/latest/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MathJaxを利用する場合は&lt;code&gt;_&lt;/code&gt;記号を頻繁に利用するので、redcarpetを利用している場合は、&lt;code&gt;_config.yml&lt;/code&gt;を以下のように設定して強調表示を無効にしておいた方が良さそうです。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redcarpet&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;redcarpet&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;no_intra_emphasis&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;サイト内検索&lt;/h2&gt;

&lt;p&gt;jekyllで生成するページは静的ページなので、サイト内検索は外部の機能を利用します（JavaScriptでなんとかするのもアリですが、）。このサイトで利用しているのはGoogleのカスタム検索です。&lt;/p&gt;

&lt;p&gt;Googleのカスタム検索: &lt;a href=&quot;https://www.google.co.jp/cse/?hl=ja&quot;&gt;https://www.google.co.jp/cse/?hl=ja&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;ドラフト原稿を登録する&lt;/h2&gt;

&lt;p&gt;jekyllでは、&lt;code&gt;_posts&lt;/code&gt;の代わりに&lt;code&gt;_drafts&lt;/code&gt;というディレクトリ配下に原稿を置くとドラフト原稿となり、&lt;code&gt;--drafts&lt;/code&gt;オプションをつけて起動した場合のみ、生成対象にすることが出来ます。これでドラフト原稿安心して、バージョン管理に含めることが出来ますね。。&lt;/p&gt;

&lt;p&gt;他にもあるけど、ひとまずこんな感じ。。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Sep 2014 02:49:11 +0900</pubDate>
        <link>http://takemikami.com/2014/09/16/blogjekyll.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/16/blogjekyll.html</guid>
        
        <category>jekyll</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>blogをGitHubPages/jekyllに移行したメモ</title>
        <description>&lt;p&gt;このブログをGitHubPagesに移行し、同時にWordPressからjekyllでの静的ページ生成に切り替えたので。移行のメモとして、GitHubPagesとjekyllでサイトを作成する手順を残しておきます。&lt;/p&gt;

&lt;p&gt;GitHubPageではjekyllを使って動的にサイト生成する機能があるのですが、pluginなどを自由に拡張できないなどの制約があるので、Shippableでページを生成して、静的ファイルをホスティングする流れでいきます。全体の流れを以下の図に示します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3886/15226091626_5cf3367829.jpg&quot; alt=&quot;ShippableとGitHubPages全体図&quot;&gt;&lt;/p&gt;

&lt;p&gt;この手順を実施する際に以下のページを参考にさせていただきました。
Shippableの場合はsshkeyがあるのでTravisのよりも、シンプルに実現できました。&lt;/p&gt;

&lt;p&gt;Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する
&lt;a href=&quot;http://tricknotes.hateblo.jp/entry/2013/06/17/020229&quot;&gt;http://tricknotes.hateblo.jp/entry/2013/06/17/020229&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;GutHubPagesを準備する&lt;/h1&gt;

&lt;h2&gt;GitHubPagesとは&lt;/h2&gt;

&lt;p&gt;GitHubPagesとは、GitHubのサーバで静的なWebサイトをホスティングする機能です。サイトのソースコードがGitHubのリポジトリで管理されます。&lt;/p&gt;

&lt;p&gt;HTML, CSS, Japascript, ImageなどをリポジトリにpushするとWebサイトとして公開されるという仕組みです。&lt;/p&gt;

&lt;p&gt;詳しくはこちら、 &lt;a href=&quot;https://pages.github.com/&quot;&gt;https://pages.github.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;GitHubPageを準備する&lt;/h2&gt;

&lt;p&gt;手順は、先ほどのページに書いてありますが。「[githubのアカウント名].github.io」という名称のリポジトリをgithubに作成して。「index.html」ファイルをpushすれば準備完了です。&lt;/p&gt;

&lt;p&gt;しばらく待ってから、&lt;code&gt;http://[githubのアカウント名].github.io/&lt;/code&gt;にアクセスするとサイトが確認できます。（※ 私の場合、10分と少しほど待てば確認出来ました。）&lt;/p&gt;

&lt;h1&gt;PCへのjekyllセットアップ&lt;/h1&gt;

&lt;h2&gt;jekyllとは&lt;/h2&gt;

&lt;p&gt;jekyllとは、markdownやtextile記法で書かれたテキストファイルを、静的なWebサイトやブログに変換するツールです。GitHubPagesやOctpressというブログツールなどで利用されています。&lt;/p&gt;

&lt;p&gt;詳しくはこちら、&lt;a href=&quot;http://jekyllrb.com&quot;&gt;http://jekyllrb.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;jekyllのセットアップ&lt;/h2&gt;

&lt;p&gt;まずはローカルPCにjekyllをセットアップします。rubyの環境が構築出来ている前提で話をすすめます。（※私の場合は、MacOSX&amp;amp;rbenvでruby2.1.2でやっています）&lt;/p&gt;

&lt;p&gt;bundlerで、jekyllをセットアップします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;を次のように作成&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のように、インストールと初期化を実施。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll new &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;/.gitignore ./
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;/_config.yml ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;に以下を追記しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Global settings&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※_config.ymlの設定についてはこちら、&lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;http://jekyllrb.com/docs/configuration/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここまで出来たら以下のコマンドから、開発用Webサーバを起動し、&lt;code&gt;http://localhost:4000/&lt;/code&gt; で表示を確認出来るはずです。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;に、以下を追加しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Ignore vendor gems
/vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで一度commitしておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add --all
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;install jekyll&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このリポジトリをbitbucketの非公開リポジトリにpushしておきます。手順は、bitbucketで新規リポジトリを生成した後に出てくる、既存リポジトリの登録方法を参照してください。&lt;/p&gt;

&lt;h2&gt;GitHubPagesへの公開&lt;/h2&gt;

&lt;p&gt;それでは、ローカルPCからjekyllで生成したページをGitHubPagesに公開します。&lt;/p&gt;

&lt;p&gt;まず、&lt;code&gt;_site&lt;/code&gt;以下に、GitHubPages用のリポジトリを取り込みます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ rm -rf _site
$ git clone git@github.com:[あなたのID]/[あなたのID].github.io.git _site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jekyllでページを生成します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;_site&lt;/code&gt;以下でcommit/pushを行い、変更をGitHubPagesに反映します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd _site
$ git add --all
$ git commit -m &amp;quot;&amp;quot;
$ git push
$ cd ../
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまで出来たら&lt;code&gt;http://[あなたのID].github.io/&lt;/code&gt; でサイトの表示を確認出来るはずです。&lt;/p&gt;

&lt;h1&gt;Shippableでの配備の設定&lt;/h1&gt;

&lt;h2&gt;Shippableとは&lt;/h2&gt;

&lt;p&gt;Shippableとはアプリケーションの継続的インテグレーションと配備の機能を提供しているWebサービスです。類似のサービスにTravisCIやCircleCIなどがあります。&lt;/p&gt;

&lt;p&gt;shippableでの継続的インテグレーションは、以下の２点を対応を行えば設定することができます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;対象リポジトリにshippable.ymlという定義ファイルを格納&lt;/li&gt;
&lt;li&gt;ShippableにbitbucketのIDでログインし該当リポジトリをEnableに設定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;詳しくはこちら、 &lt;a href=&quot;http://www.shippable.com&quot;&gt;http://www.shippable.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Shippableでの配備設定を行う&lt;/h2&gt;

&lt;p&gt;前準備として、先ほど手動で行ったGitHubPagesへの公開の手順を&lt;code&gt;Rakefile&lt;/code&gt;として作成しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;REPO_URL=&amp;#39;git@github.com:[あなたのID]/[あなたのID].github.io.git&amp;#39;

desc &amp;#39;setup for github pages deploy&amp;#39;
task :setup do
  unless File.exists?(&amp;#39;_site/.git&amp;#39;)
    system &amp;#39;rm -rf _site&amp;#39;
    system &amp;quot;git clone --quiet #{REPO_URL} _site&amp;quot;
  end
end

desc &amp;#39;build site&amp;#39;
task :build do
  system &amp;#39;rm -rf _site/*&amp;#39;
  system &amp;#39;bundle exec jekyll build&amp;#39;
end

desc &amp;#39;deploy to github pages&amp;#39;
task :deploy do
  msg = `git log -n 1 --oneline`.chomp
  system &amp;quot;cd _site &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m \&amp;quot;update with #{msg}\&amp;quot;&amp;quot;
  system &amp;quot;cd _site &amp;amp;&amp;amp; git push --quiet #{REPO_URL}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のように&lt;code&gt;shippable.yml&lt;/code&gt;を作成して、Rakefileで定義したtaskを呼び出すようにします。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.0.0&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rake setup&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rake build&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rake deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shippalbeの管理画面で、Organizationを選び、Reposの中から対象のリポジトリを選び「Enable」を押すと、継続的インテグレーションを有効にします。&lt;/p&gt;

&lt;p&gt;ただし、このままではShippableからGitHubに対してpushが出来ないので、以下の手順でGitHubにsshkeyを登録します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Shippableの管理画面で、Organizationを選び、「Deployment Key」で表示される公開鍵をコピーします。&lt;/li&gt;
&lt;li&gt;GitHubのアカウントSettingから「SSH Keys」を選び、「Add SSH Key」でShippableの公開鍵をペーストし、登録します&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここまで出来たら、次のようにbitbucketに変更をpushします。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git add shippable.yml Rakefile
$ git commit -a -m &amp;quot;install shippable&amp;quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは、自動的にShippableがページを生成して、GitHubPagesにpushしてサイトが公開されます。（Shippableがバージョンアップした直後だからなのか、無償アカウントだからなのか、30〜40分くらい待たないと生成が開始しないみたいです。）&lt;/p&gt;

&lt;p&gt;生成から配備までの流れは以上になります。ここまで設定すれば、あとは記事を追加して、bitbucketにpushすれば、サイト公開まで自動的に行われます。&lt;/p&gt;

&lt;p&gt;WordPressもよく出来たアプリケーションですが、このような仕組みの方がソースと公開したファイルのバージョン管理がやりやすくて好きですね。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Sep 2014 02:48:47 +0900</pubDate>
        <link>http://takemikami.com/2014/09/16/blogGitHubPagesjekyll.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/16/blogGitHubPagesjekyll.html</guid>
        
        <category>jekyll</category>
        
        <category>github</category>
        
        <category>shippable</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>PusherとRubyOnRailsでチャットアプリを作ってみた</title>
        <description>&lt;p&gt;このエントリでは、&lt;br&gt;
PusherとRubyOnRailsで簡単なチャットアプリを作成する流れを示します。  &lt;/p&gt;

&lt;p&gt;WebSocketを使うと、Webアプリケーションで、&lt;br&gt;
サーバ・クライアント間でリアルタイムな双方向通信を行うことが出来ます。&lt;br&gt;
Pusherというサービスを使うと、&lt;br&gt;
WebSocketに対応したサーバを自前で用意しなくても、&lt;br&gt;
お手軽にWebSocketを使用する事ができるので、&lt;br&gt;
Railsと組み合わせて、簡単なチャットアプリを作ってみます。  &lt;/p&gt;

&lt;p&gt;Pusher&lt;br&gt;
&lt;a href=&quot;http://pusher.com&quot;&gt;&lt;a href=&quot;http://pusher.com&quot;&gt;http://pusher.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このエントリで作成したソースコードはgithubに上げています。&lt;br&gt;
&lt;a href=&quot;https://github.com/takemikami/chat_rails_pusher_sample&quot;&gt;&lt;a href=&quot;https://github.com/takemikami/chat_rails_pusher_sample&quot;&gt;https://github.com/takemikami/chat_rails_pusher_sample&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;作成するアプリの概要&lt;/h1&gt;

&lt;p&gt;作成するアプリは以下の流れで、&lt;br&gt;
チャットのメッセージを送信し、ページに表示することとします。  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ブラウザからメッセージ送信&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Railsサーバで受信、PusherにPush通知依頼&lt;br&gt;&lt;/li&gt;
&lt;li&gt;PusherからブラウザにPush通知&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Push通知を受けて、メッセージを表示領域に即時表示&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/62769571@N03/15034779635&quot; title=&quot;View &#39;chat_rails_pusher_1&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;375&quot; title=&quot;chat_rails_pusher_1&quot; alt=&quot;chat_rails_pusher_1&quot; border=&quot;0&quot; src=&quot;https://farm4.staticflickr.com/3849/15034779635_0597b39a56.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下の流れでアプリを作っていきます。&lt;br&gt;
・Puhserのアカウントとアプリケーションを作る&lt;br&gt;
・既定の状態のRailsアプリを作る&lt;br&gt;
・チャット画面の枠組みを作る&lt;br&gt;
・サーバサイドの機能を組み込む&lt;br&gt;
・クライアントサイドの機能を組み込む&lt;br&gt;
・チャットの動作確認を行う&lt;br&gt;
・Pusherのキー情報を設定ファイルに移動させる  &lt;/p&gt;

&lt;h1&gt;Pusherのアカウントとアプリケーションを作る&lt;/h1&gt;

&lt;p&gt;まずは、Pusherのアカウントとアプリを作成していきます。  &lt;/p&gt;

&lt;p&gt;Pusherのサイトにアクセスする。  &lt;/p&gt;

&lt;p&gt;Pusher&lt;br&gt;
&lt;a href=&quot;http://pusher.com&quot;&gt;&lt;a href=&quot;http://pusher.com&quot;&gt;http://pusher.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「Create a Free Account」から手順に従って、アカウント作成。&lt;br&gt;
アカウントを作成したら、以下からログインして、Dashbordを表示します。  &lt;/p&gt;

&lt;p&gt;Pusher: Dashboard&lt;br&gt;
&lt;a href=&quot;https://app.pusher.com/accounts/sign_in&quot;&gt;&lt;a href=&quot;https://app.pusher.com/accounts/sign_in&quot;&gt;https://app.pusher.com/accounts/sign_in&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your Appsで「+ New app」ボタンを押し、&lt;br&gt;
「chat_rails_pusher_sample」という名称を指定して、&lt;br&gt;
「Create app」を押し、アプリを作成します。  &lt;/p&gt;

&lt;p&gt;アプリ作成後の画面では、&lt;br&gt;
「Code examples」が表示され、&lt;br&gt;
クライアント側のJavascriptと、&lt;br&gt;
サーバ側の各種言語のサンプルが確認できます。  &lt;/p&gt;

&lt;p&gt;後ほどの手順では、&lt;br&gt;
ここに表示されるサンプルをコピーして使用していきます。  &lt;/p&gt;

&lt;h1&gt;既定の状態のRailsアプリを作る&lt;/h1&gt;

&lt;p&gt;ひとまず、既定の状態のRailsアプリを用意します。  &lt;/p&gt;

&lt;p&gt;次のコマンドでRailsアプリ用のディレクトリを作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir chat_rails_pusher_sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;chat_rails_pusher_sample
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のとおり「Gemfile」を作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のコマンドでrailsをインストール、Railsアプリを作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails new .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のコマンドで、開発用Webサーバを起動します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ブラウザで「&lt;a href=&quot;http://127.0.0.1:3000/%E3%80%8D%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%80%81&quot;&gt;http://127.0.0.1:3000/」を表示し、&lt;/a&gt;&lt;br&gt;
RailsのWelcomeが表示されていることを確認。  &lt;/p&gt;

&lt;h1&gt;チャット画面の枠組みを作る&lt;/h1&gt;

&lt;p&gt;次に、チャット画面を枠組みを作ります。  &lt;/p&gt;

&lt;p&gt;次のコマンドで、メインのコントローラーを作成。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g controller chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「config/routes.rb」に、&lt;br&gt;
チャットのメイン画面のルート、メッセージの送信先ルートを設定します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;chat#index&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;post&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;chat#post&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;****&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;省略&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「app/views/chat/index.html.erb」を編集し、&lt;br&gt;
チャットのメイン画面の枠組みをつくります。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= form_tag(&amp;#39;/post&amp;#39;, :remote =&amp;gt; true) do %&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= text_field_tag &amp;#39;message&amp;#39; %&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= submit_tag &amp;#39;send&amp;#39; %&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;messagelog&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前半のform_tagが、メッセージの送信用フォーム&lt;br&gt;
後半のdivタグが、メッセージの表示領域です。  &lt;/p&gt;

&lt;h1&gt;サーバサイドの機能を組み込む&lt;/h1&gt;

&lt;p&gt;次にサーバサイド側の機能を組み込んでいきます。  &lt;/p&gt;

&lt;p&gt;pusherのライブラリを使うので、「Gemfile」に以下を追記します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pusher&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のコマンドで、先ほど追記したpusherのgemをインストール。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PusherのDashbordからRails用のコードを確認します。&lt;br&gt;
Dashbordに表示されているサンプルコードを元に、&lt;br&gt;
以下のように「config/initializers/pusher.rb」を作成。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pusher&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://&amp;lt;あなたのaccess_key&amp;gt;:&amp;lt;あなたのaccess_key_secret&amp;gt;@api.pusherapp.com/apps/&amp;lt;あなたのapp_id&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gem追加とinitializer配下を修正したので、&lt;br&gt;
ここで、railsのWebサーバは再起動しておきます。  &lt;/p&gt;

&lt;p&gt;以下のように「app/controllers/chat_controller.rb」を編集します。&lt;br&gt;
ここでは、ブラウザからpostされたメッセージを受け付け、&lt;br&gt;
そのメッセージ情報をpush送信するように、pusherに依頼を行っています。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChatController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;general_channel&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chat_event&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;クライアントサイドの機能を組み込む&lt;/h1&gt;

&lt;p&gt;ここまでで、&lt;br&gt;
1. ブラウザからメッセージ送信&lt;br&gt;
2. Railsサーバで受信、PusherにPush通知依頼&lt;br&gt;
3. PusherからブラウザにPush通知&lt;br&gt;
まで実装できたので、&lt;br&gt;
次は、ブラウザ側でPush通知を受け付け、&lt;br&gt;
メッセージ表示領域に追記する部分を実装します。  &lt;/p&gt;

&lt;p&gt;PusherのDashbordのクライアント側サンプルコードを元に、&lt;br&gt;
以下のように「app/views/chat/index.html.erb」に処理を追記。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//js.pusher.com/2.2/pusher.min.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Enable pusher logging - don&amp;#39;t include this in production&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pusher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;あなたのaccess_key&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;general_channel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chat_event&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messagelog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;messagelog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messagediv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;messagediv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;messagelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messagediv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

**** 省略 ****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;チャットの動作確認を行う&lt;/h1&gt;

&lt;p&gt;ここまでで、チャットアプリの流れは完成したので、動作確認を行います。&lt;br&gt;
２つのブラウザを起動し、&lt;br&gt;
両方のブラウザで「&lt;a href=&quot;http://127.0.0.1:3000/%E3%80%8D%E3%82%92%E9%96%8B%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82&quot;&gt;http://127.0.0.1:3000/」を開きます。&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;一方でメッセージを入力し送信すると、&lt;br&gt;
即時に両方にメッセージが追記されることが確認出来るはずです。  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/62769571@N03/15031721821&quot; title=&quot;View &#39;chat_rails_pusher_2&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;258&quot; title=&quot;chat_rails_pusher_2&quot; alt=&quot;chat_rails_pusher_2&quot; border=&quot;0&quot; src=&quot;https://farm6.staticflickr.com/5573/15031721821_6a58c09530.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Pusherのキー情報を設定ファイルに移動させる&lt;/h1&gt;

&lt;p&gt;Pusherのキー情報がソースコードべた書きなのが気持ち悪いので、&lt;br&gt;
最後にキー情報を設定ファイルに移動させておきます。  &lt;/p&gt;

&lt;p&gt;次のように「config/pusher.yml」を作成。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;development:
app_id: &amp;lt;あなたのapp_id&amp;gt;
access_key: &amp;lt;あなたのaccess_key&amp;gt;
access_key_secret: &amp;lt;あなたのaccess_key_secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のとおり「config/initializer/pusher.rb」を修正。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pusher&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;config/pusher.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;access_key_secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@api.pusherapp.com/apps/{config_pusher[&amp;#39;app_id&amp;#39;]}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のとおり「app/controllers/chat_controller.rb」を修正。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChatController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;config/pusher.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@pusher_access_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;****&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;省略&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のとおり「app/views/chat/index.html.erb」を修正。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;**** 省略 ****
var pusher = new Pusher(&amp;#39;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= @pusher_access_key %&amp;gt;&amp;#39;);
**** 省略 ****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上。。  &lt;/p&gt;
</description>
        <pubDate>Tue, 26 Aug 2014 04:08:10 +0900</pubDate>
        <link>http://takemikami.com/archives/1518</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1518</guid>
        
        <category>pusher</category>
        
        <category>rails4</category>
        
        <category>websocket</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>MacOSXでAngularJS開発環境を構築する手順</title>
        <description>&lt;p&gt;MacOSXでAngularJSでの開発環境を構築したので、&lt;br&gt;
その手順のメモを残します。  &lt;/p&gt;

&lt;p&gt;AngularJS:&lt;br&gt;
&lt;a href=&quot;https://angularjs.org&quot;&gt;&lt;a href=&quot;https://angularjs.org&quot;&gt;https://angularjs.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全体の流れは、次のとおり。&lt;br&gt;
1. nodebrewのインストール&lt;br&gt;
2. nodeのインストール&lt;br&gt;
3. grunt-cli, yo, bower, generator-angularのインストール&lt;br&gt;
4. compassのインストール&lt;br&gt;
5. AngularJSアプリのテンプレート生成  &lt;/p&gt;

&lt;h1&gt;nodebrewのインストール&lt;/h1&gt;

&lt;p&gt;まず、nodeのversion管理ツールとしてnodebrewをインストールします。&lt;br&gt;
# 世間にはいくつかnodeのversion管理ツールがあるようですが、&lt;br&gt;
# なんとなくactiveっぽいので、ここではnodebrewを選びました。    &lt;/p&gt;

&lt;p&gt;nodebrew:&lt;br&gt;
&lt;a href=&quot;https://github.com/hokaccha/nodebrew&quot;&gt;&lt;a href=&quot;https://github.com/hokaccha/nodebrew&quot;&gt;https://github.com/hokaccha/nodebrew&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下の手順は、基本的に公式サイトの手順通りです。&lt;br&gt;
次のコマンドでインストール実行。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -L git.io/nodebrew &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; perl - setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「~/.bash_profile」に以下を追記して、パスを設定。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.nodebrew/current/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、パス設定を読み込む。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、パスが通っている事を確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;nodeのインストール&lt;/h1&gt;

&lt;p&gt;次は、nodebrewを使って、nodeをインストールします。  &lt;/p&gt;

&lt;p&gt;まずは、以下のコマンドで、利用可能なnodeのバージョンを確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew ls-remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表示されたバージョンの中から、インストールしたいバージョンを指定して、&lt;br&gt;
nodeのインストールを実行。&lt;br&gt;
ここでは、最新の「v0.11.13」を指定します。&lt;br&gt;
# しばらく時間がかかります。    &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew install v0.11.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでインストールされたことを確認。&lt;br&gt;
# インストールしたnodeのバージョンが表示されるはずです。    &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、利用するnodeのバージョンを指定します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew  use v0.11.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、指定したバージョンが有効になっている事を確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;grunt-cli, yo, bower, generator-angularのインストール&lt;/h1&gt;

&lt;p&gt;以下のコマンドで、AngularJSの開発に利用する各種ツールをインストールします。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g grunt-cli
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g bower
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インストールしたツールのサイトはそれぞれ、以下の通り。  &lt;/p&gt;

&lt;p&gt;Grunt:&lt;br&gt;
&lt;a href=&quot;http://gruntjs.com&quot;&gt;&lt;a href=&quot;http://gruntjs.com&quot;&gt;http://gruntjs.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeoman:&lt;br&gt;
&lt;a href=&quot;http://yeoman.io&quot;&gt;&lt;a href=&quot;http://yeoman.io&quot;&gt;http://yeoman.io&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bower:&lt;br&gt;
&lt;a href=&quot;http://bower.io&quot;&gt;&lt;a href=&quot;http://bower.io&quot;&gt;http://bower.io&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;compassのインストール&lt;/h1&gt;

&lt;p&gt;この手順では、sass/scssを利用するので、&lt;br&gt;
以下のコマンドでcompassをインストールしておきます。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install compass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;AngularJSアプリのテンプレート生成&lt;/h1&gt;

&lt;p&gt;以下のコマンドで、AngularJSの開発のテンプレートを生成するツールをインストールします。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install generator-angular
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでAngularJSアプリケーションのテンプレートを生成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir ngapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ngapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo angular ngapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成時にいろいろ聞かれますが、ひとまず全て既定値で回答しておきます。  &lt;/p&gt;

&lt;p&gt;生成が終わったら、以下のコマンドで開発用のWebサーバを起動します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既定のブラウザが開き、&lt;br&gt;
次のような画面が表示されれば、テンプレート作成OKです。  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/62769571@N03/15027881561&quot; title=&quot;View &#39;angularjs01&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;324&quot; title=&quot;angularjs01&quot; alt=&quot;angularjs01&quot; border=&quot;0&quot; src=&quot;https://farm6.staticflickr.com/5581/15027881561_c81342553f.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;# 本番はここからですけどね    &lt;/p&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 21:42:57 +0900</pubDate>
        <link>http://takemikami.com/archives/1516</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1516</guid>
        
        <category>AngularJS</category>
        
        <category>javascript</category>
        
        <category>nodejs</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>MacOSXでのrbenvを使ってrubyをインストールする手順</title>
        <description>&lt;p&gt;rubyのバージョン管理はながらくrvmを使っていて特に不満も無かったのですが、&lt;br&gt;
まわりにrbenv使う人の方が増えてきたのもあり、&lt;br&gt;
そろそろrbenvに乗り換えようと思ったので、ここに設定手順をまとめておきます。  &lt;/p&gt;

&lt;p&gt;rbenv:&lt;br&gt;
&lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;&lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;https://github.com/sstephenson/rbenv&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全体の流れは、次のとおり。&lt;br&gt;
1. homebrewでrbenvをインストール&lt;br&gt;
2. rubyのインストール  &lt;/p&gt;

&lt;p&gt;※homebrewがインストールされている事は前提です  &lt;/p&gt;

&lt;h1&gt;homebrewでrbenvをインストール&lt;/h1&gt;

&lt;p&gt;以下のお決まりコマンドで、インストールを実行。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install rbenv ruby-build
**** 省略 ****
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Caveats
To use Homebrew&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;s directories rather than ~/.rbenv add to your profile:
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RBENV_ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/var/rbenv

To &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;shims and autocompletion add to your profile:
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; which rbenv &amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(rbenv init -)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&amp;gt; Summary
**** 省略 ****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のように説明が表示されるので、&lt;br&gt;
これから、この説明に従って設定をしていきます。  &lt;/p&gt;

&lt;p&gt;「~/.bash_profile」に以下を追記します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; which rbenv &amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(rbenv init -)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、パス設定を読み込む。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、パスが通っている事を確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;rubyのインストール&lt;/h1&gt;

&lt;p&gt;まずは、以下のコマンドで、利用可能なrubyのバージョンを確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv install -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表示されたバージョンの中から、インストールしたいバージョンを指定して、&lt;br&gt;
rubyのインストールを実行。&lt;br&gt;
ここでは、「2.1.2」を指定します。&lt;br&gt;
# しばらく時間がかかります。    &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv install 2.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでインストールされたことを確認。&lt;br&gt;
# インストールしたrubyのバージョンが表示されるはずです。    &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、利用するrubyのバージョンを指定します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv global 2.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、指定したバージョンが有効になっている事を確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、bunlderも入れておきます。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bundleのようにコマンドがあるgemの場合は、&lt;br&gt;
システムに標準でインストールされているコマンドにパスが通っていることがあるので、&lt;br&gt;
次のように「rbenv rehash」を実行して、&lt;br&gt;
rbenv管理下のコマンドにパスが通るようにしておきます。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which bundle
/usr/bin/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv rehash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which bundle
/Users/&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ユーザ名&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;/.rbenv/shims/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ドキュメントをよく読まなかった私が良くなかったのですが、&lt;br&gt;
システム標準に入っているbundlerが動き、？？？となってしまいました。&lt;br&gt;
そこだけ意識していれば、特に難しい事は無く使えるかなと思います、&lt;br&gt;
今のところですが。。  &lt;/p&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 21:35:47 +0900</pubDate>
        <link>http://takemikami.com/archives/1512</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1512</guid>
        
        <category>rbenv</category>
        
        <category>ruby</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>母校で後輩が書いた小説の合評してきました</title>
        <description>&lt;p&gt;大学の時に所属していた文学研究会の後輩から、
「集まるから部室来て」というメールが来たので、
行ってみると、合評会でした。&lt;/p&gt;

&lt;p&gt;文学研究会でやっている合評会は、
みんなが書いた文芸創作（小説や詩）を読んで、
お互いに批評し合うという会です。
何をするのか知らなかった私は、
当然、自分が書いた作品を用意していなかったので。
後輩達の小説の批評をする立場として参加してきました。&lt;/p&gt;

&lt;p&gt;それぞれの作品に対して、
「読者にどういう風に読ませたいと思って書いたのか？」
と作者の意図を聞いて、
その意図を作品から感じ取ることが出来たかを、
読者の立場から意見する、という形で批評を進めていました。&lt;/p&gt;

&lt;p&gt;以下、合評で話題になった内容で、
印象的だった事について触れていきたいと思います。&lt;/p&gt;

&lt;p&gt;まずは、キャラクターのネーミングについて。
登場人物に意味ありげな名前をつけていると、
作品中でその名前の意味がはっきりしないと、
読後にもやもやが残るという意見がありました。
特に意味を持たせる必要が無いなら、
シンプルな名前にしておいた方が無難ということと、
まじめに、名前の意味とかを調べ出すと、
勉強も資料も必要になるので、大変だねという話をしていました。&lt;/p&gt;

&lt;p&gt;次に、描写を曖昧にしておきたい場合の表現について。
作中で「○○のような」という表現があり、
「○○のようなもの」と書くと物質的になって意図した表現にならないが、
「○○のような」で切ってしまうと収まりが悪いという部分があった。
ここをどのように表現することが出来るか？という点を考えていた。
地の文が三人称だと、曖昧な様を表現する時に、
地の文でそのまま表現するより、
登場人物の視点に移してから表現した方がしっくりくるかも知れない、
という話をしていました。&lt;/p&gt;

&lt;p&gt;次に、食べ物と色の表現について。
食べ物を色で表現する時に、表現したい味と色がしっかりと、
かみあっていないと伝わらないという話題。
具体的にはおいしいカレーって何色と書けばいいんだろう？
という話をしていました。
辛いカレーとおいしいカレーでは、表現すべき色は違うねという話など。&lt;/p&gt;

&lt;p&gt;最後に、切ない表現をどのようにするかという話題。
恋愛における切ない様子を表現する際に、
登場人物の内面を描写する方法もあるが、
情景描写を使って登場人物の切ない心情を描写したいと話をしていました。
このような表現を学ぶには、
昔の歌謡曲の歌詞なども参考になるという話をしていました。&lt;/p&gt;

&lt;p&gt;こんな風に、創作の話をしていると、
久しぶりに自分でも小説を書きたいなと思いました。
楽しかったです、こういう話ができる仲間は本当に貴重だと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/62769571@N03/14470803751&quot; title=&quot;View &#39;DSC_0066&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;500&quot; title=&quot;DSC_0066&quot; alt=&quot;DSC_0066&quot; border=&quot;0&quot; src=&quot;https://farm4.staticflickr.com/3910/14470803751_2bba7a73a1.jpg&quot; width=&quot;281&quot;/&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Jun 2014 02:55:27 +0900</pubDate>
        <link>http://takemikami.com/archives/1492</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1492</guid>
        
        
        <category>日記</category>
        
      </item>
    
      <item>
        <title>「期末に予算を消化する」ことに正義はあるか？</title>
        <description>&lt;p&gt;期末になると道路工事が増える、など
期末までに残された予算を使い切るということが、
公共事業や、民間企業でも行われることは多い。&lt;/p&gt;

&lt;p&gt;普通に考えれば、
緊急性の無い工事や、その時点ですぐに必要では無いものを購入したりなど
お金の使い道を、わざわざ探して使い切るという行為は合理的ではない。
こういった行為は、
割り当てられた予算をきちんと使い切るという実績を作って、
次の期に、同等の金額の予算割り当てを受けるために行われる。&lt;/p&gt;

&lt;p&gt;毎期、同様の額の予算割り当てを得るために、
期末に、わざわざお金の使い道を探して使い切る。
そんな行為は無駄なので、
余ったお金は繰り越して、本当に必要な時に使うなり、
もっと必要性が高い部分にお金を回した方が、合理的だと考えるのが普通だ。&lt;/p&gt;

&lt;p&gt;が、ここで少し考えてみる。
余ったお金を繰り越したり、他にお金を回すという判断を誰がするのだろう？
毎期ごとに、予算を見直すようになるとすると、
その判断をする人に、予算に対する権限が極端に集中するリスクがある。
そのリスクを回避しようとすると、
客観性の担保のため、予算の妥当性の証明や検証の費用がさらに必要になる。&lt;/p&gt;

&lt;p&gt;そう考えると、
「期末に予算を消化する」という方法は、
手放しでベストな方法とは呼べないけれど、
ある程度は合理性がある方法なのかもしれないなぁと思うようになった。&lt;/p&gt;

&lt;p&gt;学生の頃とかはこんなこと考えなかったけれど、
実際に、会社などで予算執行されるプロセス見てると、
単に、キーマンと仲の良い人が要求したら割り当てられるという判断基準も多い。
公共事業などが、そんなノリで割り当てられるくらいなら、
毎期、同額の方が、税金の使われ方として、まだ納得だなと思ったりする。&lt;/p&gt;
</description>
        <pubDate>Fri, 20 Jun 2014 02:48:43 +0900</pubDate>
        <link>http://takemikami.com/archives/1490</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1490</guid>
        
        
        <category>日記</category>
        
      </item>
    
      <item>
        <title>chef-soloを使ってRstudioServerをセットアップする手順</title>
        <description>&lt;p&gt;CentOS6にchef-soloを使って、&lt;br&gt;
RStudioServerをセットアップする手順を示します。  &lt;/p&gt;

&lt;p&gt;RStudioServerセットアップの手順は簡単ですが、&lt;br&gt;
処理するデータ量が増えた時の、サーバ増強・増設を考えると、&lt;br&gt;
自動化しておいた方がいいような気がしたので、&lt;br&gt;
chefのcookbookにしておきました。  &lt;/p&gt;

&lt;p&gt;このエントリで使用するchefのcookbookは、私のgithubにおいています。&lt;br&gt;
　&lt;a href=&quot;https://github.com/takemikami/chef-rstudio&quot;&gt;&lt;a href=&quot;https://github.com/takemikami/chef-rstudio&quot;&gt;https://github.com/takemikami/chef-rstudio&lt;/a&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;RStudio自体については、以下の公式サイトをご覧下さい。  &lt;/p&gt;

&lt;p&gt;RStduio&lt;br&gt;
　&lt;a href=&quot;https://www.rstudio.com/&quot;&gt;&lt;a href=&quot;https://www.rstudio.com/&quot;&gt;https://www.rstudio.com/&lt;/a&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h1&gt;Knife/Berkshelfのインストール&lt;/h1&gt;

&lt;p&gt;管理用のマシンで、&lt;br&gt;
以下のコマンドから、Knife Soloの作業用ディレクトリを作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir ~/rstudiosetup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;作業用ディレクトリに以下ファイルを作成します。  &lt;/p&gt;

&lt;p&gt;Gemfile  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;chef&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;knife-solo&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;berkshelf&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Berksfile  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:opscode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookbook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstudio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;takemikami&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstudio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、KnifeSoloをインストールします。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/rstudiosetup
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、knifeのディレクトリ構成を作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;knife solo init .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、githubからrstudioのcookbookを取得します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;berks vendor cookbooks/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;RstudioServerのセットアップ用cookbookを適用&lt;/h1&gt;

&lt;p&gt;knife-soloで接続できるCentOSの環境が用意されているとして、&lt;br&gt;
以下のコマンドで、knifeの環境を準備します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/pentahosetup
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;knife solo prepare &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;lt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;接続先マシン名&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のファイルに適用時の設定を追記します。  &lt;/p&gt;

&lt;p&gt;nodes/&amp;lt;接続先マシン名&amp;gt;.json  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{&amp;amp;quot;run_list&amp;amp;quot;:[&amp;amp;quot;recipe[rstudio::server]&amp;amp;quot;]}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、knifeでcookbookを適用をします。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;knife solo cook &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;lt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;接続先マシン名&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;gt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまでで、RStudioServerのセットアップが完了です。  &lt;/p&gt;

&lt;p&gt;上記手順以外に、&lt;br&gt;
RstudioServerは、TCPポート8787でサービスを提供するので、&lt;br&gt;
クライアントからTCPポート8787でアクセス出来るようにしておく必要があります。  &lt;/p&gt;

&lt;p&gt;ブラウザから「http://&amp;lt;接続先マシン名&amp;gt;:8787/」にアクセスすると以下のような&lt;br&gt;
ログイン画面が表示されます。  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/62769571@N03/14315616396&quot; title=&quot;View &#39;chef-rstudio1&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;260&quot; title=&quot;chef-rstudio1&quot; alt=&quot;chef-rstudio1&quot; border=&quot;0&quot; src=&quot;https://farm4.staticflickr.com/3878/14315616396_74b9655490.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;サーバ上のユーザ（UNIXのユーザ）を指定してログインすると、&lt;br&gt;
以下のような画面が表示され、Rの機能を利用することができます。  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/62769571@N03/14358946083&quot; title=&quot;View &#39;chef-rstudio2&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;322&quot; title=&quot;chef-rstudio2&quot; alt=&quot;chef-rstudio2&quot; border=&quot;0&quot; src=&quot;https://farm6.staticflickr.com/5153/14358946083_7d8333a136.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;参考にした記事&lt;/h1&gt;

&lt;p&gt;RStudioがすごそうなので使ってみた - As a Futurist…&lt;br&gt;
　&lt;a href=&quot;http://blog.riywo.com/2011/03/05/031831&quot;&gt;&lt;a href=&quot;http://blog.riywo.com/2011/03/05/031831&quot;&gt;http://blog.riywo.com/2011/03/05/031831&lt;/a&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;CentOS 6.2 に R と RStudio Server をインストールする - hiratake55 の開発メモ&lt;br&gt;
　&lt;a href=&quot;http://d.hatena.ne.jp/hiratake55/20120527/1338091311&quot;&gt;&lt;a href=&quot;http://d.hatena.ne.jp/hiratake55/20120527/1338091311&quot;&gt;http://d.hatena.ne.jp/hiratake55/20120527/1338091311&lt;/a&gt;&lt;/a&gt;  &lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jun 2014 02:03:45 +0900</pubDate>
        <link>http://takemikami.com/archives/1484</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1484</guid>
        
        <category>chef</category>
        
        <category>r</category>
        
        <category>rstudio</category>
        
        
        <category>it技術</category>
        
      </item>
    
  </channel>
</rss>
