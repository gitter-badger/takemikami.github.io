<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>takemikami&#39;s note</title>
    <description>読書記録やオリジナル文芸創作（小説、詩、エッセイなど）、IT技術の個人的なノート、 その他にコラムや日記を書き綴っている、takemikami個人運営のブログです。
</description>
    <link>http://takemikami.com/</link>
    <atom:link href="http://takemikami.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 27 Nov 2014 00:49:28 +0900</pubDate>
    <lastBuildDate>Thu, 27 Nov 2014 00:49:28 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>jThree Class Tokyo #2 に行ってきました</title>
        <description>&lt;p&gt;11/23(日)に【jQuery初心者超歓迎！秋のWebGL+API祭り】Microsoft Azure x jThree Class Tokyo #2 というイベントに行ってきました。&lt;br&gt;
10月にmixiで開催された #1 も参加し、2回目ということで今回はサポートする立場で参加させて頂きました。&lt;/p&gt;

&lt;p&gt;jThree Class Tokyo #2&lt;br&gt;
&lt;a href=&quot;https://atnd.org/events/58240&quot;&gt;https://atnd.org/events/58240&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回の会場は、品川の日本マイクロソフトさんでした。前回マイクロソフトに来たのはすまべんの時だったかな。&lt;br&gt;
&lt;img src=&quot;https://farm9.staticflickr.com/8668/15696786158_d9608677c0.jpg&quot; alt=&quot;jthree-microsoft&quot;&gt;&lt;/p&gt;

&lt;p&gt;当日の流れは、午前中にjThreeの使い方の概要、午後からは、Kinect、milkcocoa、IMINOS、THETAの各チームにわかれて実際に作品を作ってみる、そして発表という流れでした。&lt;/p&gt;

&lt;h1&gt;jThreeの使い方&lt;/h1&gt;

&lt;p&gt;JThreeの使い方は、基本的に前回の勉強会と同じ内容。私は分からない人のサポートをする立場で参加させて頂きました。&lt;/p&gt;

&lt;p&gt;内容はこのwikiのチュートリアルにまとめられています。&lt;br&gt;
&lt;a href=&quot;http://jthree.jp/wiki&quot;&gt;http://jthree.jp/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここにリファレンスがあります。&lt;br&gt;
&lt;a href=&quot;http://j3doc.azurewebsites.net/&quot;&gt;http://j3doc.azurewebsites.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前回は全くなかったドキュメントが、どんどん整備されていて。皆さんがjThreeに関心を持っている事もわかりますし。個人的にとてもありがたいです、助かります。&lt;/p&gt;

&lt;h1&gt;IMINOSとjThreeで何か作る&lt;/h1&gt;

&lt;p&gt;午後の部はチームにわかれて実際に作品を作りました。私は、IMINOSチームでサポート。&lt;/p&gt;

&lt;p&gt;IMINOS: &lt;a href=&quot;https://lr.capio.jp/services/webapis/&quot;&gt;https://lr.capio.jp/services/webapis/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;IMINOSとは、Joysoundでおなじみのエクシングさんが提供してくれている言語解析APIで、文章を与えてやると、形態素解析・ポジネガ解析などを行ってくれるWebAPIです。&lt;/p&gt;

&lt;p&gt;勉強会では、初音ミクにメッセージを入力すると、そのメッセージをポジティブかネガティブかを判定して、ポジティブなら踊る、ネガティブなら踊るのをやめる。という作品を作ってみました。&lt;/p&gt;

&lt;p&gt;実際の作品です。&lt;br&gt;
Miku With IMINOS: &lt;a href=&quot;http://editor.jthree.jp/?id=D-jZIg&quot;&gt;http://editor.jthree.jp/?id=D-jZIg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作品の試し方（なるべくChromeで試して下さい）：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;右側フレームの再生ボタンをクリック&lt;/li&gt;
&lt;li&gt;右側フレームのどこかをクリック&lt;/li&gt;
&lt;li&gt;ダイアログにメッセージを入れてOKをクリック&lt;/li&gt;
&lt;li&gt;ポジティブなメッセージなら踊る、ネガティブなら踊りを止める&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;動かしてみると、こんな感じです（静止画だと、踊ってるのか、止めてるのかわからないww）&lt;/p&gt;

&lt;p&gt;踊っているとき:&lt;br&gt;
&lt;img src=&quot;https://farm9.staticflickr.com/8668/15882315701_bb74010a81.jpg&quot; alt=&quot;miku-positive&quot;&gt;&lt;/p&gt;

&lt;p&gt;止めているとき:&lt;br&gt;
&lt;img src=&quot;https://farm8.staticflickr.com/7489/15264658163_23ee012f01.jpg&quot; alt=&quot;miku-negative&quot;&gt;&lt;/p&gt;

&lt;h1&gt;IMINOS以外のご紹介&lt;/h1&gt;

&lt;p&gt;IMINOS以外についても紹介しておきます。&lt;/p&gt;

&lt;h2&gt;Kinect&lt;/h2&gt;

&lt;p&gt;MicrosoftのXBoxOneに付属しているモーションセンサーカメラです。Kinectチームの方々は、Kinectセンサーで取り込んだモーション情報で、初音ミクを動かそうと頑張っていました。&lt;/p&gt;

&lt;p&gt;Kinect:&lt;br&gt;
&lt;a href=&quot;http://www.microsoftstore.com/store/msjp/ja_JP/pdp/Kinect-for-Windows-v2-%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3-%E3%83%99%E3%83%BC%E3%82%BF/productID.298959900&quot;&gt;http://www.microsoftstore.com/store/msjp/ja_JP/pdp/Kinect-for-Windows-v2-%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC-%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3-%E3%83%99%E3%83%BC%E3%82%BF/productID.298959900&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;milkcocoa&lt;/h2&gt;

&lt;p&gt;JavaScript一行でバックエンドを提供するサービスです。リアルタイム通信をWebのクライアント間で行うことができるので、チャットとか、みんなで何かを同期するというような目的で利用すると幸せになれるかもしれません。&lt;br&gt;
WebRTCでとりこんだカメラの画像で円卓を囲みながら、milkcocoaでチャットする作品を作られていました。&lt;/p&gt;

&lt;p&gt;milkcocoa:&lt;br&gt;
&lt;a href=&quot;https://mlkcca.com/&quot;&gt;https://mlkcca.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm9.staticflickr.com/8568/15262028404_8221d42b78.jpg&quot; alt=&quot;milkcocoa-t&quot;&gt;&lt;br&gt;
頂き物のmilkcocoaTシャツです。&lt;/p&gt;

&lt;h2&gt;THETA&lt;/h2&gt;

&lt;p&gt;全天球画像を撮影できるカメラ。会場全体の映像を取り込み、その上にjThreeで作成したステージを組み合わせた作品を作られていました。&lt;/p&gt;

&lt;p&gt;THETA:&lt;br&gt;
&lt;a href=&quot;https://theta360.com/ja/&quot;&gt;https://theta360.com/ja/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;感想とか&lt;/h1&gt;

&lt;p&gt;3Dの専門家という訳でも無いし、サポートできるほどjThree使い込んでもいないので、サポートとは言ったものの足を引っ張ってしまった気がします。もう少し勉強してから行かないとというのが感想というか、反省ですね。&lt;br&gt;
IMINOSチームで、形態素解析の技術と3DWebって何するの？という感じも会ったのですが、さらっと作った割には楽しめたのでは無いかと思います。&lt;br&gt;
今回は前回以上に盛りだくさんの内容で、良い意味で疲れました。帰ったらすぐブログ書こうと思っていたのですが、すぐ寝てしまったくらいに。&lt;/p&gt;

&lt;p&gt;それとハコスコを頂きました、週末にでも試して見ようと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7553/15264658503_f014f7d6c8.jpg&quot; alt=&quot;hacosco&quot;&gt;&lt;/p&gt;

&lt;p&gt;ハコスコ:&lt;br&gt;
&lt;a href=&quot;http://hacosco.com/&quot;&gt;http://hacosco.com/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Nov 2014 00:46:16 +0900</pubDate>
        <link>http://takemikami.com/2014/11/27/jThree-Class-Tokyo-2.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/11/27/jThree-Class-Tokyo-2.html</guid>
        
        <category>jthree</category>
        
        <category>jquery</category>
        
        <category>threejs</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>jThree Class Tokyo #1 に行ってきました</title>
        <description>&lt;p&gt;10/26(日)に【たった5時間でWebGLをマスターするjQueryユーザーのための勉強会】jThree Class Tokyo #1 というイベントに行ってきました。&lt;/p&gt;

&lt;p&gt;jThree Class Tokyo #1&lt;br&gt;
&lt;a href=&quot;http://jthree.doorkeeper.jp/events/16100&quot;&gt;http://jthree.doorkeeper.jp/events/16100&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;会場は、渋谷のmixiさんでした。会場には、モンスト１周年のポスターが貼られていました。&lt;br&gt;
&lt;img src=&quot;https://farm4.staticflickr.com/3945/15446566398_72a6798612.jpg&quot; alt=&quot;jthree-mixi&quot;&gt;&lt;/p&gt;

&lt;p&gt;当日の流れは、jThreeで作った作品の紹介、jThreeの使い方の概要、チーム毎に分かれて実際に作品を作ってみるという流れでした。&lt;/p&gt;

&lt;p&gt;ちなみに次回は、来月(11/22)に開催予定とのことです。&lt;br&gt;
 &lt;a href=&quot;https://atnd.org/events/58240&quot;&gt;https://atnd.org/events/58240&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;jThreeで作った作品の紹介&lt;/h1&gt;

&lt;p&gt;URLメモをとっていたものだけの紹介になってしまいますが、jThreeを使うと、次のような作品がthree.jsよりも簡潔なプログラムで作成することが出来るという紹介がありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;「Tell Your World」を踊る初音ミクの周りに立方体を回転させる&lt;br&gt;
&lt;a href=&quot;http://editor.jthree.jp/?id=KcYnng&quot;&gt;http://editor.jthree.jp/?id=KcYnng&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;オサレ系3D画像鑑賞BOX&lt;br&gt;
&lt;a href=&quot;http://goo.gl/TmLtOJ&quot;&gt;http://goo.gl/TmLtOJ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;jThreeを使ったトロッコゲーム&lt;br&gt;
&lt;a href=&quot;https://docs.google.com/presentation/d/1UwxJj9f6z3VJK8d9N_bRf-3P4krznEQnp-RuIxpLt7M/edit#slide=id.p&quot;&gt;https://docs.google.com/presentation/d/1UwxJj9f6z3VJK8d9N_bRf-3P4krznEQnp-RuIxpLt7M/edit#slide=id.p&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://jthree000.appspot.com/newshack/index.html&quot;&gt;http://jthree000.appspot.com/newshack/index.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;余談ですが、CodeZineに記事が掲載されていますが、
もうjThree自体が進化していて、この通り実装しても動作しませんでした。&lt;br&gt;
jThreeがどんなものかを把握するために読んでみるのも良いかと思います。&lt;br&gt;
&lt;a href=&quot;http://codezine.jp/article/corner/522&quot;&gt;http://codezine.jp/article/corner/522&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;jThreeの使い方&lt;/h1&gt;

&lt;p&gt;jThreeで作った作品の紹介の後、jThreeの使い方の概要がありましたが、詳細に書き出すと、このエントリが終わらないので省略するとして。個人的に印象に残った点を少し上げておくと。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jThree = jQuery + three.js&lt;br&gt;
&lt;a href=&quot;http://jquery.com/&quot;&gt;http://jquery.com/&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://threejs.org/&quot;&gt;http://threejs.org/&lt;/a&gt;&lt;br&gt;
jQueryでthree.jsを扱えるようにしたもの。というのがjThreeの本質です。jQueryを使ったことがある人ならば、簡単に3Dのオブジェクトを操れるようになります。&lt;/li&gt;
&lt;li&gt;jThreeのデメリット

&lt;ul&gt;
&lt;li&gt;実行速度は遅い（でも高速に開発できる）&lt;/li&gt;
&lt;li&gt;jThreeだけだと、3Dグラフィックスの基礎を理解する機会が無くなる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;jThreeで作った作品とかを見ていると、おぉWebブラウザで3D動いてるなぁ。という感想だけになってしまいがちなのですが。jQueryで扱えるという特徴があるのでWeb系のプログラマーやデザイナーにも扱えるという点、またWebコンテンツと連携させたコンテンツが出来る可能性があるという点が、jThreeの面白い特徴なのではないかと思います。&lt;/p&gt;

&lt;h1&gt;皆様の作品&lt;/h1&gt;

&lt;p&gt;参加された方が作った作品を紹介しておきます。twitterにつぶやかれていたもので、私が見つけた物だけですが。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;今日作ったやつ公開してみました。&amp;#10;&lt;a href=&quot;http://t.co/cC6b43wfpG&quot;&gt;http://t.co/cC6b43wfpG&lt;/a&gt;&amp;#10;テクスチャにカメラの映像を流して音でオブジェクトの大きさかわるやつです。&amp;#10;&amp;#10;楽しかったです。お疲れ様でしたー！&amp;#10;&amp;#10;&lt;a href=&quot;https://twitter.com/hashtag/j3_class?src=hash&quot;&gt;#j3_class&lt;/a&gt;&lt;/p&gt;&amp;mdash; Kunihiko Tanaka (@kunihikot) &lt;a href=&quot;https://twitter.com/kunihikot/status/526296784755101698&quot;&gt;2014, 10月 26&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;&lt;p&gt;ちょろっと発表もさせてもらった今日の成果物。cameraタグでコンサート風に後ろのスクリーンに別カメラ(PVのカメラワーク)を映すやつ。 &lt;a href=&quot;https://twitter.com/hashtag/j3_class?src=hash&quot;&gt;#j3_class&lt;/a&gt; ／MIKU_camera_tag_test &lt;a href=&quot;http://t.co/g42TXClWpi&quot;&gt;http://t.co/g42TXClWpi&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/WebGLEditor?src=hash&quot;&gt;#WebGLEditor&lt;/a&gt;&lt;/p&gt;&amp;mdash; えすじ (@esuji) &lt;a href=&quot;https://twitter.com/esuji/status/526293265197170688&quot;&gt;2014, 10月 26&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;私の作品は、回転させるためにいろいろ三角関数の式をいじってる間に、時間切れになってしまいましたorz 時間作って、もう少し触ってみようと思います。&lt;/p&gt;

&lt;h1&gt;mixiさんのご紹介&lt;/h1&gt;

&lt;p&gt;最後に、会場を提供頂いたmixiさんのサービスを紹介させて頂きます。mixiさんでは、社内でしっかりコードレビューをしてリリースするプロセスをとることに力を入れているというお話でした。私が今まで属していた会社は個人プレーで、全て個人の責任という風潮が強い会社だったので、そのような開発プロセスに新鮮な印象を受けました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;モンスターストライク&lt;br&gt;
&lt;a href=&quot;http://www.monster-strike.com/&quot;&gt;http://www.monster-strike.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nohana 〜お気に入りの写真を、大切な家族と〜&lt;br&gt;
&lt;a href=&quot;http://nohana.jp/&quot;&gt;http://nohana.jp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;株式会社ミクシィ
&lt;a href=&quot;http://mixi.co.jp/&quot;&gt;http://mixi.co.jp/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;感想とか&lt;/h1&gt;

&lt;p&gt;イベントの第一回目にもかかわらず、結構な参加者も多く非常に盛り上がったイベントでした。jThee自体がまだまだ発展途上で（ドキュメントも整備されておらず）、これからどうなるか分からないからこそ、非常に面白いなと思いました。&lt;br&gt;
ということで、次回も参加予定です！&lt;/p&gt;

&lt;p&gt;3Dプリンターで作成されたjThreeのロゴもありました。↓&lt;br&gt;
&lt;img src=&quot;https://farm6.staticflickr.com/5609/15447106850_5df9d4d83d.jpg&quot; alt=&quot;jthree-3d-printer&quot;&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Oct 2014 00:02:34 +0900</pubDate>
        <link>http://takemikami.com/2014/10/27/jthreeclass.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/10/27/jthreeclass.html</guid>
        
        <category>jthree</category>
        
        <category>jquery</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>milkcocoaでWebサービスを作ってみよう！に行ってきました</title>
        <description>&lt;p&gt;参加前日までmilkcocoaというものを知らなかったのですが、
10/4(土)にmilkcocoaのイベントに参加してきました。&lt;/p&gt;

&lt;p&gt;milkcocoaでWebサービスを作ってみよう！&lt;br&gt;
&lt;a href=&quot;http://bd937566c2d179a9bc480c61b1.doorkeeper.jp/events/14805&quot;&gt;http://bd937566c2d179a9bc480c61b1.doorkeeper.jp/events/14805&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;会場は、Samurai Startup Islandというスタートアップを支援するためのスペースでの開催でした。&lt;br&gt;
&lt;a href=&quot;http://samurai-startupisland.asia&quot;&gt;http://samurai-startupisland.asia&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;milkcocoaの紹介&lt;/h1&gt;

&lt;p&gt;milkcocoaとは、JavaScriptでリアルタイム通信が出来るバックエンドを提供するサービスです。が、サイト見たり、サンプル見たりした方がどのような物かはつかみやすいと思います。&lt;br&gt;
&lt;a href=&quot;https://mlkcca.com&quot;&gt;https://mlkcca.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;milkcocoaのサンプルコード&lt;br&gt;
&lt;a href=&quot;http://qiita.com/sgtn/items/86ce5f4fc58490cf5fff&quot;&gt;http://qiita.com/sgtn/items/86ce5f4fc58490cf5fff&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;milkcocoaとjThreeというWebGLのライブラリと組み合わせて、作られたFPSゲームのサンプルですが、ブラウザでこのような物が動いてしまうのが面白いです。&lt;br&gt;
&lt;a href=&quot;http://jthreefps.mlkcca-app.com/&quot;&gt;http://jthreefps.mlkcca-app.com/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;作成したWebサービス&lt;/h1&gt;

&lt;p&gt;当日、わたし達が作成したサービスが、ブラウザ間で表示ページ・スクロール位置を同期するデモです。&lt;/p&gt;

&lt;p&gt;ソースコードはこちら&lt;br&gt;
  &lt;a href=&quot;https://github.com/takemikami/milkcocoa-browsersync-demo&quot;&gt;https://github.com/takemikami/milkcocoa-browsersync-demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;デモサイトはこちら&lt;br&gt;
&lt;a href=&quot;http://takemikami.com/milkcocoa-browsersync-demo/&quot;&gt;http://takemikami.com/milkcocoa-browsersync-demo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※説明は、（簡単にですが）ソースコードのREADMEに書いたので、そちらをご覧下さい。&lt;/p&gt;

&lt;h1&gt;感想とか&lt;/h1&gt;

&lt;p&gt;milkcocoaさんのイベントでしたが、半分くらいjThreeのイベントになってました。Webブラウザ上で、リアルタイム通信とW3D処理が融合している動いている様は、お手軽で見たり触ったりしていてとても楽しいなと感じました。&lt;br&gt;
今回作成したWebサービスではjThreeにまで手が出せなかったので、このあとはjThreeでも遊んでみようと思います。。&lt;/p&gt;

&lt;p&gt;# そもそもこのイベント、jThreeの松田さんに教えて貰って参加したのでww&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Oct 2014 23:50:49 +0900</pubDate>
        <link>http://takemikami.com/2014/10/04/milkcocoa.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/10/04/milkcocoa.html</guid>
        
        <category>milkcocoa</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>WebRTC Meetup Tokyo #4 に行ってきました</title>
        <description>&lt;p&gt;10/3(金)に、WebRTC Meetup Tokyo #4 に行ってきました。&lt;br&gt;
　&lt;a href=&quot;http://peatix.com/event/51641&quot;&gt;http://peatix.com/event/51641&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ということで、個人的なメモと思ったことをまとめます。&lt;/p&gt;

&lt;p&gt;ちなみに、WebRTC Meetup Tokyoとは、
WebRTCを流行らせてたくて仕方が無い人たちの勉強会です(^_^)&lt;/p&gt;

&lt;p&gt;今回は、21Cafeというイベントスペースで開催でした。&lt;br&gt;
　&lt;a href=&quot;http://www.ni-ichicafe.com&quot;&gt;http://www.ni-ichicafe.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;次回は12月開催予定とのことです。&lt;/p&gt;

&lt;h1&gt;ortcの仕様を読む！（Tukimikageさん）&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/39837629&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/yusukenaka52/ortc-39837629&quot; title=&quot;ORTCの仕様書をざっくり斜め読みする&quot; target=&quot;_blank&quot;&gt;ORTCの仕様書をざっくり斜め読みする&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/yusukenaka52&quot; target=&quot;_blank&quot;&gt;Yusuke NAKA&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h2&gt;ObjectRTCとは&lt;/h2&gt;

&lt;p&gt;ORTCとは、WebRTCと同様のブラウザ上でP2P通信を行う仕様。
Microsoft, Google, TokBoxなどが仕様策定に関わっているようで、
今後、WebRTC2.0で統合する方向で検討されているとのことです。&lt;/p&gt;

&lt;p&gt;今後、IEに実装されるかどうか分からないが。既に、IEで動くリファレンスコードはある様子。&lt;/p&gt;

&lt;h2&gt;仕様&lt;/h2&gt;

&lt;p&gt;オブジェクトごとに、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RTCDtlsTransport ... DTLSによるデータ転送を司るオブジェクト&lt;/li&gt;
&lt;li&gt;RTCIceTransport ... ICEで相互コネクションを確立するオブジェクト&lt;/li&gt;
&lt;li&gt;RTCIceTransportController ... 帯域幅の推定の共有を行うオブジェクト？&lt;/li&gt;
&lt;li&gt;RTCIceListner ... ローカルのICE候補を取得するためのイベントリスナー&lt;/li&gt;
&lt;li&gt;RTCRtpSender ... MediaStreamの送信、停止を行うオブジェクト&lt;/li&gt;
&lt;li&gt;RTCRtpReciever ... MediaStreamの受信、停止を行うオブジェクト&lt;/li&gt;
&lt;li&gt;RTCRtpListener ... DTLSから送信されたDTPパケットを受信するオブジェクト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;現状のWebRTCでは、STPを書き換えてCODEC変更を実装をすることが多いが、
そういうことをしなくて良いように、CODEC関連のユーティリティが定義されています。&lt;/p&gt;

&lt;h2&gt;その他&lt;/h2&gt;

&lt;p&gt;ObjectRTCには、モバイル開発用ライブラリ「ortclib」、Node.js用のサーバコードなどもあります。&lt;/p&gt;

&lt;h1&gt;WebRTC+WebGLで切り拓く新技術「WebAR」(m_mitsuhideさん)&lt;/h1&gt;

&lt;p&gt;WrbRTC的には、ここに載っている事をやっているだけとのこと。
&lt;a href=&quot;http://techracho.bpsinc.jp/skk/2014_05_26/17630&quot;&gt;http://techracho.bpsinc.jp/skk/2014_05_26/17630&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本題は、jthreeというWebGLのライブラリの話。&lt;br&gt;
&lt;a href=&quot;http://jthree.jp&quot;&gt;http://jthree.jp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下のエディタ画面を開いて、右側の再生ボタンからを押すとブラウザ上で3Dのモデルが動き、会場ではハンズオンという形で、ARタグを読んで初音ミクを踊らせるデモを作成。&lt;br&gt;
&lt;a href=&quot;http://editor.jthree.jp/&quot;&gt;http://editor.jthree.jp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ARタグを読み込むと初音ミクが踊るというデモはこちらから。&lt;br&gt;
&lt;a href=&quot;http://editor.jthree.jp/?id=N0a5sg&quot;&gt;http://editor.jthree.jp/?id=N0a5sg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;マーカーはこちら。&lt;br&gt;
&lt;a href=&quot;http://jthree.jp/marker/&quot;&gt;http://jthree.jp/marker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebGLって難しそうなイメージがあったので、こんな簡単に作れてしまう事に驚きました。&lt;/p&gt;

&lt;h1&gt;WebRTC＋αで無理矢理やってみた×3（Massie_Gさん）&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/39820073&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/mganeko/webrtc-meetup4-lt&quot; title=&quot;WebRTC ＋αで無理やりやってみた×3 WebRTC Meetup Tokyo 4&quot; target=&quot;_blank&quot;&gt;WebRTC ＋αで無理やりやってみた×3 WebRTC Meetup Tokyo 4&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/mganeko&quot; target=&quot;_blank&quot;&gt;mganeko&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;いろいろな事を無理矢理やりましたというお話。&lt;/p&gt;

&lt;p&gt;フルメッシュになるのを避けるために、会議参加者の画像を集めたPCを用意して集約したPCを用意して、その画面をキャプチャして、各PCに送るという方法を行ってみたケースはかなりカオス。まねせずに、MCUを使いましょうと言うお話でした。&lt;/p&gt;

&lt;h1&gt;ち〜ん（仮）（D.F.Macさん）&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/39838345&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/tadfmac/ss-39838345&quot; title=&quot;ち〜ん&quot; target=&quot;_blank&quot;&gt;ち〜ん&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/tadfmac&quot; target=&quot;_blank&quot;&gt;tadfmac&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;プロトコルをは単純な方がいいよね、っていう話。と、skyway最高！っていうお話。&lt;/p&gt;

&lt;h1&gt;OpentokでWebRTC簡単実装（末永 昌也さん）&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/sue738/sutatoatupudefalsewebrtcdao-ru-number-webrtcjp&quot;&gt;https://speakerdeck.com/sue738/sutatoatupudefalsewebrtcdao-ru-number-webrtcjp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WebRTC自前で実装はいろいろ頑張ったら出来るけど、スタートアップ企業は、クラウドサービス使うのもありだよって言うお話。&lt;/p&gt;

&lt;h1&gt;オープンソースMCUを試してみた（tonofoさん）&lt;/h1&gt;

&lt;p&gt;以下の３つのオープンソースMCUについての比較のお話。比較点をきちんと整理された資料でお話して頂きましたが、残念ながら資料は公開難しそうという話でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Janus&lt;/li&gt;
&lt;li&gt;Licode&lt;/li&gt;
&lt;li&gt;Jitsi VideoBridge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MCUの対応方法としては、以下の２種類があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MCUと各クライアント間の上り下りを一本化する方法&lt;/li&gt;
&lt;li&gt;MCUと各クライアント間の上りのみを一本化する方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上り一本化のみを行う意味あいとしては、以下のような事があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上り下り両方を一本化するとMCUが高負荷になる&lt;/li&gt;
&lt;li&gt;一般的なWAN回線の場合は、上りが遅いことが多いので上りの一本化の方がメリットが大きい&lt;/li&gt;
&lt;li&gt;端末にとっては、下りよりも上りの処理の方が負荷が大きい&lt;/li&gt;
&lt;li&gt;下りを一本化すると画面レイアウトの自由度が下がる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;オープンソース実装をいろいろ比較したが、今のところは「Lincode」が無難かなという話でした。&lt;/p&gt;

&lt;p&gt;MCUを置くなら、ホワイトクラウド仮想サーバが条件良さそうと言う話でした。
&lt;a href=&quot;http://tm.softbank.jp/cloud/iaas/virtual_server/&quot;&gt;http://tm.softbank.jp/cloud/iaas/virtual_server/&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;WebRTCでECサイトに仮想試着を実装してみた(uturistさん)&lt;/h1&gt;

&lt;p&gt;GetUserMediaのカメラ使って自分の画像を撮影して、
服の画像と組み合わせて試着できるサイトのお話。
PCのカメラで上手く撮影するのが難しいから、セルフタイマー的な機能を持たせていたのが印象的でした。&lt;/p&gt;

&lt;h1&gt;知っとくと得するかもしれないconstraintsたち（かえるさん）&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/39836033&quot; width=&quot;427&quot; height=&quot;356&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/KensakuKOMATSU/constraints-39836033&quot; title=&quot;知ってると得するかもしれないConstraintsたち&quot; target=&quot;_blank&quot;&gt;知ってると得するかもしれないConstraintsたち&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/KensakuKOMATSU&quot; target=&quot;_blank&quot;&gt;Kensaku Komatsu&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;設定すればWebRTCでDSCPやIPV6を利用できるという誰得な話題。ネットワーク周りの話なのでアプリケーションの見た目にすぐに大きな変化があるわけでは無いけれど、いろいろとメリット考えられるかもよということでした。&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Oct 2014 23:51:12 +0900</pubDate>
        <link>http://takemikami.com/2014/10/03/webrtcmeetup4.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/10/03/webrtcmeetup4.html</guid>
        
        <category>webrtc</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>Rails製ECサイトのSpreeCommerceをインストールしてみた手順</title>
        <description>&lt;p&gt;SpreeCommerceというRailsで作られたECサイトのオープンソースパッケージがあったので、インストールして少しだけ設定してみました。&lt;/p&gt;

&lt;p&gt;SpreeCommerce&lt;br&gt;
　&lt;a href=&quot;https://github.com/spree/spree&quot;&gt;https://github.com/spree/spree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;空のRailsアプリを作って、そこに認証機能(Devise)をインストール、SpreeCommerce本体をインストール、認証機能との連携、国際化、商品作成、PayPalプラグインを追加という流れでセットアップします。&lt;/p&gt;

&lt;h1&gt;Railsアプリの作成&lt;/h1&gt;

&lt;p&gt;以下のコマンドのようにして、さらっとRailsアプリの基本を作ります。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;source &amp;#39;https://rubygems.org&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gem &amp;#39;rails&amp;#39;, &amp;#39;4.1.4&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails new . --skip-bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm Gemfile.lock
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;認証機能(devise)のインストール&lt;/h1&gt;

&lt;p&gt;認証機能もつけたいのでdeviseをインストールします。以下のdeviseのページに書かれている流れの通り、さらっと設定します。&lt;/p&gt;

&lt;p&gt;devise&lt;br&gt;
　&lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;https://github.com/plataformatec/devise&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gem &amp;#39;devise&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails generate devise:install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails generate devise User
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt;に以下を追記しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;p class=&amp;quot;notice&amp;quot;&amp;gt;&amp;lt;%= notice %&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p class=&amp;quot;alert&amp;quot;&amp;gt;&amp;lt;%= alert %&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ひとまず、&lt;code&gt;bundle exec rails s&lt;/code&gt;で起動し、&lt;code&gt;http://localhost:3000/users/sign_in&lt;/code&gt;でログイン画面が表示されることを確認しておきます。&lt;/p&gt;

&lt;h1&gt;SpreeCommerce本体のインストール&lt;/h1&gt;

&lt;p&gt;ここまで来れば、次はいよいよSpreeCommerceのインストールです。
&lt;code&gt;Gemfile&lt;/code&gt;にSpree本体のgemを追記します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree/spree&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2-3-stable&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bundle installの実行及びSpreeのインストールを実行します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g spree:install --sample&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; --seed&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この状態で、&lt;code&gt;bundle exec rails s&lt;/code&gt;で起動して&lt;code&gt;http://localhost:3000/&lt;/code&gt;にアクセスすると、商品等何も無い状態のページが表示出来ます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5566/15084575120_5c5ef0d604.jpg&quot; alt=&quot;spree-plain&quot;&gt;&lt;/p&gt;

&lt;p&gt;※この手順では実施しませんが、以下を入力するとサンプルデータを投入できます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec rake db:seed
$ bundle exec rake spree_sample:load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;カスタム認証(deviseと連携する)&lt;/h1&gt;

&lt;p&gt;SpreeCommerceと認証機能との連携については、以下のSpreeCommerceのドキュメントに手順が説明されているので、この記事に従って、設定します。&lt;/p&gt;

&lt;p&gt;Custome Authentication - Developer Guide&lt;br&gt;
　&lt;a href=&quot;http://guides.spreecommerce.com/developer/authentication.html&quot;&gt;http://guides.spreecommerce.com/developer/authentication.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DeviseのユーザテーブルにSpreeCommerceで利用するカラムを追加します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec rails g spree:custom_user User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SpreeCommerceと連携させるモデルの名称を設定ファイル&lt;code&gt;config/initializers/spree.rb&lt;/code&gt;で指定します。変更前は「Spree::LegacyUser」になっています。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Spree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lib/spree/authentication_helpers.rb&lt;/code&gt;をdeviseのユーザモデル名に変更します。本エントリの手順の場合は変更不要ですが、ユーザのモデル名を「User」以外に設定した場合は、次の部分の&lt;code&gt;current_user&lt;/code&gt;を変更します。例えばモデル名をPersonにした場合はcurrent_personにする。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    def spree_current_user
      current_user
    end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;config/routes.rb&lt;/code&gt;で、SpreeCommerceの遷移先パスの接続先をDeviseのコントローラに向けます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;devise_scope&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;devise/sessions#new&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/signup&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;devise/registrations#new&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/logout&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;devise/sessions#destroy&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ヘッダのナビバーにログイン状態表示・ログイン・ログアウトボタンを表示するビューを追加します。Defaceというもので、元のビューに内容を追加したり、置き換えたりすることが出来まます。ここでは、Defaceの差し込み機能を使って、ナビバーに必要な情報を追加します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/overrides/auth_login_bar.rb&lt;/code&gt;で、差し込み部分・差し込むビューを定義。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Deface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Override&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:virtual_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;spree/shared/_nav_bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;auth_shared_login_bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:insert_before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;li#search-bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:partial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;spree/shared/login_bar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;:original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;eb3fa668cd98b6a1c75c36420ef1b238a1fc55ad&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;app/views/spree/shared/_login_bar.html.erb&lt;/code&gt;で差し込むビューを定義。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% if &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spree_current_user&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= link_to Spree.t(:logout), spree_logout_path, :method =&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delete&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% else %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;%= link_to Spree.t(:login), spree_login_path %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;    &amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link_to&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Spree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:signup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;spree_signup_path&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  &amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% end &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまで設定したら、以下のコマンドでDBにカラムを追加しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;管理者ユーザの追加&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;bundle exec rails s&lt;/code&gt;でアプリを起動し、&lt;code&gt;http://localhost:3000/sign_up&lt;/code&gt;から、メールアドレス・パスワードを指定して、ユーザを登録します。&lt;/p&gt;

&lt;p&gt;以下のようにコマンドを入力して、登録したユーザに管理権限を設定します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails c
&amp;gt; &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; User.find_by&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;email: &lt;span class=&quot;s2&quot;&gt;&amp;quot;※登録したメールアドレス※&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&amp;gt; user.spree_roles &amp;lt;&amp;lt; Spree::Role.find_or_create_by&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name: &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;http://localhost:3000/admin&lt;/code&gt;にアクセスして管理画面を、と思ったらエラーが出てますね。。。&lt;/p&gt;

&lt;p&gt;エラーメッセージとソース見てみた感じ、以下の内容で&lt;code&gt;app/assets/stylesheets/spree/backend/globals/_variables_override.scss&lt;/code&gt;というファイルを追加したら、管理画面が表示されました。（こういう仕様では無いような気がするので、すぐに解消されるような気がしますが。）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$color-ste-success-bg:         #FFFFFF !default;
$color-ste-notice-bg:          #FFFFFF !default;
$color-ste-error-bg:           #FFFFFF !default;

$color-ste-success-text:       #6788A2 !default;
$color-ste-notice-text:        #6788A2 !default;
$color-ste-error-text:         #6788A2 !default;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再び&lt;code&gt;http://localhost:3000/admin&lt;/code&gt;にアクセスすると、管理画面が出てきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5580/15084575300_95d10ef70f.jpg&quot; alt=&quot;spree-admin&quot;&gt;&lt;/p&gt;

&lt;h1&gt;国際化モジュール(spree_i18n)のインストール&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にSpree国際化モジュールのgemを追記します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree_i18n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree/spree_i18n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2-3-stable&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bundle installの実行及びおよび国際化モジュールのインストールを行います。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g spree_i18n:install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;config/application.rb&lt;/code&gt;に日本語ロケールを指定しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i18n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_locale&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ja&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;管理画面も日本語になりました。（※railsの再起動必要です）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3900/15270893312_463b3e763c.jpg&quot; alt=&quot;spree-adminjp&quot;&gt;&lt;/p&gt;

&lt;h1&gt;商品の作成&lt;/h1&gt;

&lt;p&gt;それでは、何か購入出来るように管理画面から商品を作ります。&lt;/p&gt;

&lt;h2&gt;通貨の設定&lt;/h2&gt;

&lt;p&gt;設定→一般で、以下の内容を設定して更新。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通貨の設定 - 通貨の選択：JapaneseYen(JPY)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;ゾーンの作成&lt;/h2&gt;

&lt;p&gt;設定→国→「＋NEW COUNTRY」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本&lt;/li&gt;
&lt;li&gt;ISO名：JP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定→ゾーン→「＋新規ゾーン」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本&lt;/li&gt;
&lt;li&gt;支払い方法：国による区別&lt;/li&gt;
&lt;li&gt;デフォルトのタックスゾーン：チェックあり&lt;/li&gt;
&lt;li&gt;国：日本&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;税金の作成&lt;/h2&gt;

&lt;p&gt;設定→税金カテゴリ→「＋新規税金カテゴリ」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：消費税&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定→税率→「＋新規税率」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：消費税（税込）&lt;/li&gt;
&lt;li&gt;比率：8&lt;/li&gt;
&lt;li&gt;価格に含まれる：チェックあり&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;配送方法の作成&lt;/h2&gt;

&lt;p&gt;設定→配送カテゴリ→「＋新規配送カテゴリ」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本国内配送&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定→配送方法→「＋新規配送方法」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：日本国内配送&lt;/li&gt;
&lt;li&gt;配送カテゴリ：日本国内配送&lt;/li&gt;
&lt;li&gt;ゾーン：日本&lt;/li&gt;
&lt;li&gt;計算方法：一定

&lt;ul&gt;
&lt;li&gt;金額：1000&lt;/li&gt;
&lt;li&gt;通貨：JPY&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;税金：消費税（税込）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;商品の作成&lt;/h2&gt;

&lt;p&gt;商品管理→プロトタイプ→「＋新規プロトタイプ」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;p&gt;名称：書籍&lt;/p&gt;

&lt;p&gt;商品管理→「＋新規商品」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名称：面白い本&lt;/li&gt;
&lt;li&gt;定価：5000&lt;/li&gt;
&lt;li&gt;発売開始日・入荷日：本日以前&lt;/li&gt;
&lt;li&gt;Slug：HON-001&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と思ったら、商品作ろうとするとslugが必須とエラーが出て商品が作れないですね(^_^;　とりあえず、以下のファイルを直接修正して、slugの入力欄を足しておきます。むりやりですが。。。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vendor/bundle/ruby/2.1.0/bundler/gems/spree-458e1cb3b6c1/backend/app/views/spree/admin/products/new.html.erb&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    &amp;lt;div class=&amp;#39;row&amp;#39;&amp;gt;
    &amp;lt;div data-hook=&amp;quot;admin_product_form_slug&amp;quot;&amp;gt;
      &amp;lt;%= f.field_container :slug do %&amp;gt;
        &amp;lt;%= f.label :slug, raw(Spree.t(:slug) + content_tag(:span, &amp;#39; *&amp;#39;,  :class =&amp;gt; &amp;quot;required&amp;quot;)) %&amp;gt;
        &amp;lt;%= f.text_field :slug, :class =&amp;gt; &amp;#39;fullwidth title&amp;#39; %&amp;gt;
        &amp;lt;%= f.error_message_on :slug %&amp;gt;
      &amp;lt;% end %&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまで設定して、&lt;code&gt;http://localhost:3000/&lt;/code&gt;を開くと、登録した商品が表示されます。カートには投入できますが、支払い方法が存在しないので、まだ購入完了まで進めません。&lt;/p&gt;

&lt;h1&gt;Paypalとの決済連携モジュールをインストール&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;にSpreeのPaypal支払いモジュールのgemを追記します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree_paypal_express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;spree-contrib/better_spree_paypal_express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;2-3-stable&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;bundle installとテーブル追加を行います。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g spree_paypal_express:install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake db:migrate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Paypalとの決済連携設定&lt;/h1&gt;

&lt;p&gt;支払い方法を設定しますが、その前にPayPalのSandboxアカウントを作成しておきます。sandbox用アカウントはPaypalDevelperから作成出来ます。Dashbord→Sandbox:AccountってところでCreateAccountでBusinessタイプを作成して、APIcredentialsってところに出てくる情報を控えておきます。&lt;/p&gt;

&lt;p&gt;PayPalDevleoper&lt;br&gt;
　&lt;a href=&quot;https://developer.paypal.com&quot;&gt;https://developer.paypal.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;設定→支払い方法→「＋支払い方法を追加」と選び、以下の内容を設定して、「作成」。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;プロバイダー：Spree::PaypalGatewayExpress&lt;/li&gt;
&lt;li&gt;名称：Paypal&lt;/li&gt;
&lt;li&gt;ログイン、パスワード、SIGNATURE：先ほど作成したSandboxアカウントの値&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここまで設定すると、&lt;code&gt;http://localhost:3000/&lt;/code&gt;から商品を購入することが出来ます（本当にとりあえずですが）。。
テストで商品購入と試すときはPayPalに遷移したときURLが&lt;code&gt;https://www.sandbox.paypal.com&lt;/code&gt;のようにsandboxとなっているかは確認しておきましょう。。&lt;/p&gt;

&lt;p&gt;開発がアクティブなので、運用に使うにはきちんとテストと手直しが必要ですが、ある程度Rails分かる人なら、十分使えそうな気がしました。&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Sep 2014 05:34:20 +0900</pubDate>
        <link>http://takemikami.com/2014/09/18/RailsECSpreeCommerce.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/18/RailsECSpreeCommerce.html</guid>
        
        <category>spree</category>
        
        <category>ec</category>
        
        <category>rails</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>Railsアプリのエラー発生をHeroku上のerrbitで監視する手順</title>
        <description>&lt;p&gt;このエントリでは、RailsアプリのエラーをErrbitで監視する手順の作業ログをまとめています。Errbitではエラーの監視を行うことができます。ErrbitはAirbrakeというサービスのオープンソース版で、この手順ではErrbitをHerokuにセットアップすることにします。&lt;/p&gt;

&lt;p&gt;errbit&lt;br&gt;
　&lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;https://github.com/errbit/errbit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Airbrake&lt;br&gt;
　&lt;a href=&quot;https://airbrake.io&quot;&gt;https://airbrake.io&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;ErrBitのセットアップ&lt;/h1&gt;

&lt;p&gt;以下のerrbitのページ「Deploying to Heroku:」という部分に手順が書いてあるので、この通りに実施します。&lt;/p&gt;

&lt;p&gt;errbit&lt;br&gt;
　&lt;a href=&quot;https://github.com/errbit/errbit&quot;&gt;https://github.com/errbit/errbit&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;PC上での準備&lt;/h2&gt;

&lt;p&gt;PCにruby,bundlerはセットアップされている前提で、errbitのcloneとbundle installを実行します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone http://github.com/errbit/errbit.git
$ cd errbit
$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;db/seeds.rb&lt;/code&gt;を修正します。以下の３点を自分用に変更。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;*** 省略 ***
admin_username = &amp;quot;errbit&amp;quot;
admin_email = &amp;quot;errbit@#{Errbit::Config.host}&amp;quot;
admin_pass  = &amp;#39;password&amp;#39;
*** 省略 ***
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修正したらcommitしておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git commit db/seeds.rb -m &amp;quot;setup admin id/password&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;herokuへの登録&lt;/h2&gt;

&lt;p&gt;herokuへのユーザ登録・クレジットカード登録・heroku Toolbeltはセットアップは出来ている前提で、以下のようにコマンドを入力してherokuに、errbitをデプロイします。（※ここでは無料のAdd-onを利用しているので基本的に費用はかからないはず）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ heroku login
$ heroku create ※設定したいアプリ名（省略してもOK）※
$ heroku addons:add mongolab:sandbox
$ heroku addons:add sendgrid:starter
$ heroku config:add HEROKU=true
$ heroku config:add SECRET_TOKEN=&amp;quot;$(bundle exec rake secret)&amp;quot;
$ heroku config:add ERRBIT_HOST=※errbitのホスト名※
$ heroku config:add ERRBIT_EMAIL_FROM=※通知メールの送信元※
$ git push heroku master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでHeroku上のDBにシードデータ登録・インデックス生成します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ heroku run rake db:seed
$ heroku run rake db:mongoid:create_indexes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;herokuのDBを無料範囲内で利用するために、定期的に対応済みエラーをクリアするスケジューラーを追加しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ heroku addons:add scheduler:standard
$ heroku addons:open scheduler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;heroku Schedulerの設定画面が出てくるので、Add Jobを選んでtaskに&lt;code&gt;rake errbit:db:clear_resolved&lt;/code&gt;を指定します。&lt;/p&gt;

&lt;p&gt;ここまで設定してから、HerokuのアプリのURLにアクセスすると次のような画面が出てくるので、設定した管理ユーザでログインします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5579/15080651199_97f646de03.jpg&quot; alt=&quot;errbit-login&quot;&gt;&lt;/p&gt;

&lt;p&gt;ログイン後の画面はこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3918/15267383235_7fd9a32cd1.jpg&quot; alt=&quot;errbi-start&quot;&gt;&lt;/p&gt;

&lt;p&gt;この画面の「AddNewApp」からRailsアプリを追加していきますが、そこから先はRailsのアプリを作った後で実施します。&lt;/p&gt;

&lt;h1&gt;監視対象のRailsアプリを作る&lt;/h1&gt;

&lt;h2&gt;Railsアプリの準備&lt;/h2&gt;

&lt;p&gt;以下のコマンドのようにして、Railsアプリの基本を作ります。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ mkdir sample
$ cd sample
$ echo &amp;quot;source &amp;#39;https://rubygems.org&amp;#39;&amp;quot; &amp;gt; Gemfile
$ echo &amp;quot;gem &amp;#39;rails&amp;#39;&amp;quot; &amp;gt;&amp;gt; Gemfile
$ bundle install --path vendor/bundle
$ bundle exec rails new . --skip-bundle
$ rm Gemfile.lock
$ bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;RailsアプリへのErrbitの設定&lt;/h2&gt;

&lt;p&gt;Errbitの管理画面「AddNewApp」から、アプリ名を指定してアプリを作成します（それ以外は、ひとまず既定値で）。作成後画面の「No errs have been caught yet, make sure you setup your app」に、Railsアプリに設定すべき情報が表示されます。&lt;/p&gt;

&lt;p&gt;作成後の画面に表示されている内容で&lt;code&gt;config/initializers/errbit.rb&lt;/code&gt;を作成し。また、&lt;code&gt;Gemfile&lt;/code&gt;に以下を追記。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;gem &amp;#39;airbrake&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gemを追加したので、bundle installしておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Errbitの動作確認&lt;/h2&gt;

&lt;p&gt;ここで、次のコマンドを入力すると動作確認を行うことが出来ます。このコマンドを入力した後、errbitの画面を見ると以下のようにエラーが発生している事が確認できます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec rake airbrake:test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5557/15244382906_7d7f632df5.jpg&quot; alt=&quot;errbit-err&quot;&gt;&lt;/p&gt;

&lt;h2&gt;slackへのエラー通知&lt;/h2&gt;

&lt;p&gt;エラー発生時にslackにも通知するように設定してみます。slackへのユーザ登録は出来ている前提で、手順を記載します。&lt;/p&gt;

&lt;p&gt;Slackの「Configure Integrations」で「Integration」の設定画面に行き、「Incoming Webhooks」を追加します。ここで生成されるTOKEN文字列をコピーしておきます。（左側のno「REGENERATE TOKEN」ボタンの上側に出ている文字列です）&lt;/p&gt;

&lt;p&gt;次にerrbitのアプリ設定画面の「NOTIFICATION SERVICE」のところで、「SLACK」を選び、「SUBDOMAIN」「TOKEN」「ROOM」を指定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm6.staticflickr.com/5576/15080685530_2f863d1c20.jpg&quot; alt=&quot;errbit-slack&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SUBDOMAIN: 自分が使っているチャット画面の「[subdomain].slack.com」の「[subdomain]」の部分を指定&lt;/li&gt;
&lt;li&gt;TOKEN: 先ほどの生成した文字列&lt;/li&gt;
&lt;li&gt;ROOM: 通知したいCHANNELを指定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;設定後にもう一度、&lt;code&gt;bundle exec rake airbrake:test&lt;/code&gt;すると、slackへのエラー通知が確認出来ます。&lt;/p&gt;

&lt;p&gt;この手順でerrbitを構築して開発サーバ等に仕込んでおけば、開発時のバグ消化などがスムーズにできるのでは無いかなと思いました。（もちろん、本番環境のエラー管理にも利用すべきですが）&lt;/p&gt;

&lt;p&gt;以上。。&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Sep 2014 22:20:51 +0900</pubDate>
        <link>http://takemikami.com/2014/09/17/RailsHerokuerrbit.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/17/RailsHerokuerrbit.html</guid>
        
        <category>heroku</category>
        
        <category>errbit</category>
        
        <category>rails</category>
        
        <category>slack</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>blog用にjekyllを設定したメモ</title>
        <description>&lt;p&gt;このブログをjekyllで生成するにあたって、プラグインとかいろいろと調べたので、このエントリにまとめておきます。&lt;/p&gt;

&lt;h1&gt;基本的なこと&lt;/h1&gt;

&lt;h2&gt;jekyllのプラグイン機能って？&lt;/h2&gt;

&lt;p&gt;jekyllにはプラグイン機能があり、いろいろとサイト生成の挙動を拡張できます。作成したプラグインは&lt;code&gt;_plugins&lt;/code&gt;ディレクトリに配置して利用します。以下のページの「Available Plugins」というところで、利用できるプラグインも紹介されています。&lt;/p&gt;

&lt;p&gt;プラグイン機能の説明： &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;http://jekyllrb.com/docs/plugins/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Liquidって？&lt;/h2&gt;

&lt;p&gt;jekyllではLiquidというテンプレートエンジンを利用しています。基本的には、変数の表示：&lt;code&gt;{{ variable }}&lt;/code&gt;、機能の実行：&lt;code&gt;{% function %}&lt;/code&gt;で、テンプレートを作成していきます。Liquidの文法などは次のページに説明があります。&lt;/p&gt;

&lt;p&gt;Liquid Documentaion：  &lt;a href=&quot;http://docs.shopify.com/themes/liquid-documentation/basics&quot;&gt;http://docs.shopify.com/themes/liquid-documentation/basics&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;設定したこと&lt;/h1&gt;

&lt;p&gt;jekyllとか関係ないこともありますが、ブログを生成する際に設定したことをずらっと並べていきます。&lt;/p&gt;

&lt;h2&gt;アイコンを利用する&lt;/h2&gt;

&lt;p&gt;このブログでは、 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt; などのアイコンを利用していますが、これはFont Awesomeというツールキットのアイコンです。以下のプラグインを使えばLiquidのタグでアイコンを表示出来るようになります。&lt;/p&gt;

&lt;p&gt;アイコンを表示するプラグイン： &lt;a href=&quot;http://ryancmorrissey.com/blog/2014/01/25/font-awesome-icons-jekyll-tag-plugin/&quot;&gt;http://ryancmorrissey.com/blog/2014/01/25/font-awesome-icons-jekyll-tag-plugin/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Font Awesomeについて： &lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/&quot;&gt;http://fortawesome.github.io/Font-Awesome/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;アイコンの一覧：　&lt;a href=&quot;http://fortawesome.github.io/Font-Awesome/icons/&quot;&gt;http://fortawesome.github.io/Font-Awesome/icons/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;一覧をページングする&lt;/h2&gt;

&lt;p&gt;一覧ページをページングする場合は、次のページの方法で設定します。&lt;/p&gt;

&lt;p&gt;Pagination: &lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot;&gt;http://jekyllrb.com/docs/pagination/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;タグページを作る&lt;/h2&gt;

&lt;p&gt;タグページ（タグ毎の投稿一覧ページ）を作成する場合は、次のプラグインを利用します。このプラグインでタグクラウドも生成出来ます。&lt;/p&gt;

&lt;p&gt;jekyll-tagginプラグイン：&lt;a href=&quot;https://github.com/pattex/jekyll-tagging&quot;&gt;https://github.com/pattex/jekyll-tagging&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;カテゴリページを作る&lt;/h2&gt;

&lt;p&gt;カテゴリページ（カテゴリ毎の投稿一覧ページ）は、次のページを参考に作成しました。
 jekyllのカテゴリページ：&lt;a href=&quot;http://count0.org/2013/07/04/jekyll-category-page.html&quot;&gt;http://count0.org/2013/07/04/jekyll-category-page.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;サイトマップを作る&lt;/h2&gt;

&lt;p&gt;サイトマップ（検索エンジンに読み込ませるためのサイトマップ）は、次のプラグインで生成できます。&lt;/p&gt;

&lt;p&gt;Jekyll Plugin: sitemap.xml Generator : &lt;a href=&quot;https://github.com/kinnetica/jekyll-plugins&quot;&gt;https://github.com/kinnetica/jekyll-plugins&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Liquidのテンプレートを無効にする&lt;/h2&gt;

&lt;p&gt;投稿の本文に&lt;code&gt;{{ variable }}&lt;/code&gt;のような記載があるとLiquidのタグとして処理され困ることがあるので、これを回避するために以下のプラグインで無効化出来るようにします。&lt;/p&gt;

&lt;p&gt;Raw tag for jekyll:  &lt;a href=&quot;https://gist.github.com/phaer/1020852&quot;&gt;https://gist.github.com/phaer/1020852&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;数式を表示する&lt;/h2&gt;

&lt;p&gt;数式の表示にはMathJaxを利用します。これでLaTexライクに数式が利用できます。以下はjekyllでの設定方法と、MathJax自体のドキュメントです。&lt;/p&gt;

&lt;p&gt;MathJax with Jekyll: &lt;a href=&quot;http://gastonsanchez.com/blog/opinion/2014/02/16/Mathjax-with-jekyll.html&quot;&gt;http://gastonsanchez.com/blog/opinion/2014/02/16/Mathjax-with-jekyll.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MathJax Documentation: &lt;a href=&quot;http://docs.mathjax.org/en/latest/index.html&quot;&gt;http://docs.mathjax.org/en/latest/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MathJaxを利用する場合は&lt;code&gt;_&lt;/code&gt;記号を頻繁に利用するので、redcarpetを利用している場合は、&lt;code&gt;_config.yml&lt;/code&gt;を以下のように設定して強調表示を無効にしておいた方が良さそうです。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;redcarpet&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;redcarpet&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;no_intra_emphasis&amp;#39;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;サイト内検索&lt;/h2&gt;

&lt;p&gt;jekyllで生成するページは静的ページなので、サイト内検索は外部の機能を利用します（JavaScriptでなんとかするのもアリですが、）。このサイトで利用しているのはGoogleのカスタム検索です。&lt;/p&gt;

&lt;p&gt;Googleのカスタム検索: &lt;a href=&quot;https://www.google.co.jp/cse/?hl=ja&quot;&gt;https://www.google.co.jp/cse/?hl=ja&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;ドラフト原稿を登録する&lt;/h2&gt;

&lt;p&gt;jekyllでは、&lt;code&gt;_posts&lt;/code&gt;の代わりに&lt;code&gt;_drafts&lt;/code&gt;というディレクトリ配下に原稿を置くとドラフト原稿となり、&lt;code&gt;--drafts&lt;/code&gt;オプションをつけて起動した場合のみ、生成対象にすることが出来ます。これでドラフト原稿安心して、バージョン管理に含めることが出来ますね。。&lt;/p&gt;

&lt;p&gt;他にもあるけど、ひとまずこんな感じ。。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Sep 2014 02:49:11 +0900</pubDate>
        <link>http://takemikami.com/2014/09/16/blogjekyll.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/16/blogjekyll.html</guid>
        
        <category>jekyll</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>blogをGitHubPages/jekyllに移行したメモ</title>
        <description>&lt;p&gt;このブログをGitHubPagesに移行し、同時にWordPressからjekyllでの静的ページ生成に切り替えたので。移行のメモとして、GitHubPagesとjekyllでサイトを作成する手順を残しておきます。&lt;/p&gt;

&lt;p&gt;GitHubPageではjekyllを使って動的にサイト生成する機能があるのですが、pluginなどを自由に拡張できないなどの制約があるので、Shippableでページを生成して、静的ファイルをホスティングする流れでいきます。全体の流れを以下の図に示します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://farm4.staticflickr.com/3886/15226091626_5cf3367829.jpg&quot; alt=&quot;ShippableとGitHubPages全体図&quot;&gt;&lt;/p&gt;

&lt;p&gt;この手順を実施する際に以下のページを参考にさせていただきました。
Shippableの場合はsshkeyがあるのでTravisのよりも、シンプルに実現できました。&lt;/p&gt;

&lt;p&gt;Middleman で作った web サイトを Travis + GitHub pages でお手軽に運用する
&lt;a href=&quot;http://tricknotes.hateblo.jp/entry/2013/06/17/020229&quot;&gt;http://tricknotes.hateblo.jp/entry/2013/06/17/020229&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;GutHubPagesを準備する&lt;/h1&gt;

&lt;h2&gt;GitHubPagesとは&lt;/h2&gt;

&lt;p&gt;GitHubPagesとは、GitHubのサーバで静的なWebサイトをホスティングする機能です。サイトのソースコードがGitHubのリポジトリで管理されます。&lt;/p&gt;

&lt;p&gt;HTML, CSS, Japascript, ImageなどをリポジトリにpushするとWebサイトとして公開されるという仕組みです。&lt;/p&gt;

&lt;p&gt;詳しくはこちら、 &lt;a href=&quot;https://pages.github.com/&quot;&gt;https://pages.github.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;GitHubPageを準備する&lt;/h2&gt;

&lt;p&gt;手順は、先ほどのページに書いてありますが。「[githubのアカウント名].github.io」という名称のリポジトリをgithubに作成して。「index.html」ファイルをpushすれば準備完了です。&lt;/p&gt;

&lt;p&gt;しばらく待ってから、&lt;code&gt;http://[githubのアカウント名].github.io/&lt;/code&gt;にアクセスするとサイトが確認できます。（※ 私の場合、10分と少しほど待てば確認出来ました。）&lt;/p&gt;

&lt;h1&gt;PCへのjekyllセットアップ&lt;/h1&gt;

&lt;h2&gt;jekyllとは&lt;/h2&gt;

&lt;p&gt;jekyllとは、markdownやtextile記法で書かれたテキストファイルを、静的なWebサイトやブログに変換するツールです。GitHubPagesやOctpressというブログツールなどで利用されています。&lt;/p&gt;

&lt;p&gt;詳しくはこちら、&lt;a href=&quot;http://jekyllrb.com&quot;&gt;http://jekyllrb.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;jekyllのセットアップ&lt;/h2&gt;

&lt;p&gt;まずはローカルPCにjekyllをセットアップします。rubyの環境が構築出来ている前提で話をすすめます。（※私の場合は、MacOSX&amp;amp;rbenvでruby2.1.2でやっています）&lt;/p&gt;

&lt;p&gt;bundlerで、jekyllをセットアップします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Gemfile&lt;/code&gt;を次のように作成&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のように、インストールと初期化を実施。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll new &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;/.gitignore ./
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt;/_config.yml ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;に以下を追記しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Global settings&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;source&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;※_config.ymlの設定についてはこちら、&lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;http://jekyllrb.com/docs/configuration/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここまで出来たら以下のコマンドから、開発用Webサーバを起動し、&lt;code&gt;http://localhost:4000/&lt;/code&gt; で表示を確認出来るはずです。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;に、以下を追加しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# Ignore vendor gems
/vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで一度commitしておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add --all
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;install jekyll&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このリポジトリをbitbucketの非公開リポジトリにpushしておきます。手順は、bitbucketで新規リポジトリを生成した後に出てくる、既存リポジトリの登録方法を参照してください。&lt;/p&gt;

&lt;h2&gt;GitHubPagesへの公開&lt;/h2&gt;

&lt;p&gt;それでは、ローカルPCからjekyllで生成したページをGitHubPagesに公開します。&lt;/p&gt;

&lt;p&gt;まず、&lt;code&gt;_site&lt;/code&gt;以下に、GitHubPages用のリポジトリを取り込みます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ rm -rf _site
$ git clone git@github.com:[あなたのID]/[あなたのID].github.io.git _site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jekyllでページを生成します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ bundle exec jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;_site&lt;/code&gt;以下でcommit/pushを行い、変更をGitHubPagesに反映します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd _site
$ git add --all
$ git commit -m &amp;quot;&amp;quot;
$ git push
$ cd ../
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここまで出来たら&lt;code&gt;http://[あなたのID].github.io/&lt;/code&gt; でサイトの表示を確認出来るはずです。&lt;/p&gt;

&lt;h1&gt;Shippableでの配備の設定&lt;/h1&gt;

&lt;h2&gt;Shippableとは&lt;/h2&gt;

&lt;p&gt;Shippableとはアプリケーションの継続的インテグレーションと配備の機能を提供しているWebサービスです。類似のサービスにTravisCIやCircleCIなどがあります。&lt;/p&gt;

&lt;p&gt;shippableでの継続的インテグレーションは、以下の２点を対応を行えば設定することができます。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;対象リポジトリにshippable.ymlという定義ファイルを格納&lt;/li&gt;
&lt;li&gt;ShippableにbitbucketのIDでログインし該当リポジトリをEnableに設定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;詳しくはこちら、 &lt;a href=&quot;http://www.shippable.com&quot;&gt;http://www.shippable.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Shippableでの配備設定を行う&lt;/h2&gt;

&lt;p&gt;前準備として、先ほど手動で行ったGitHubPagesへの公開の手順を&lt;code&gt;Rakefile&lt;/code&gt;として作成しておきます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;REPO_URL=&amp;#39;git@github.com:[あなたのID]/[あなたのID].github.io.git&amp;#39;

desc &amp;#39;setup for github pages deploy&amp;#39;
task :setup do
  unless File.exists?(&amp;#39;_site/.git&amp;#39;)
    system &amp;#39;rm -rf _site&amp;#39;
    system &amp;quot;git clone --quiet #{REPO_URL} _site&amp;quot;
  end
end

desc &amp;#39;build site&amp;#39;
task :build do
  system &amp;#39;rm -rf _site/*&amp;#39;
  system &amp;#39;bundle exec jekyll build&amp;#39;
end

desc &amp;#39;deploy to github pages&amp;#39;
task :deploy do
  msg = `git log -n 1 --oneline`.chomp
  system &amp;quot;cd _site &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m \&amp;quot;update with #{msg}\&amp;quot;&amp;quot;
  system &amp;quot;cd _site &amp;amp;&amp;amp; git push --quiet #{REPO_URL}&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のように&lt;code&gt;shippable.yml&lt;/code&gt;を作成して、Rakefileで定義したtaskを呼び出すようにします。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ruby&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;rvm&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;2.0.0&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;master&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rake setup&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rake build&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;after_success&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rake deploy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shippalbeの管理画面で、Organizationを選び、Reposの中から対象のリポジトリを選び「Enable」を押すと、継続的インテグレーションを有効にします。&lt;/p&gt;

&lt;p&gt;ただし、このままではShippableからGitHubに対してpushが出来ないので、以下の手順でGitHubにsshkeyを登録します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Shippableの管理画面で、Organizationを選び、「Deployment Key」で表示される公開鍵をコピーします。&lt;/li&gt;
&lt;li&gt;GitHubのアカウントSettingから「SSH Keys」を選び、「Add SSH Key」でShippableの公開鍵をペーストし、登録します&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここまで出来たら、次のようにbitbucketに変更をpushします。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git add shippable.yml Rakefile
$ git commit -a -m &amp;quot;install shippable&amp;quot;
$ git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは、自動的にShippableがページを生成して、GitHubPagesにpushしてサイトが公開されます。（Shippableがバージョンアップした直後だからなのか、無償アカウントだからなのか、30〜40分くらい待たないと生成が開始しないみたいです。）&lt;/p&gt;

&lt;p&gt;生成から配備までの流れは以上になります。ここまで設定すれば、あとは記事を追加して、bitbucketにpushすれば、サイト公開まで自動的に行われます。&lt;/p&gt;

&lt;p&gt;WordPressもよく出来たアプリケーションですが、このような仕組みの方がソースと公開したファイルのバージョン管理がやりやすくて好きですね。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Sep 2014 02:48:47 +0900</pubDate>
        <link>http://takemikami.com/2014/09/16/blogGitHubPagesjekyll.html</link>
        <guid isPermaLink="true">http://takemikami.com/2014/09/16/blogGitHubPagesjekyll.html</guid>
        
        <category>jekyll</category>
        
        <category>github</category>
        
        <category>shippable</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>PusherとRubyOnRailsでチャットアプリを作ってみた</title>
        <description>&lt;p&gt;このエントリでは、&lt;br&gt;
PusherとRubyOnRailsで簡単なチャットアプリを作成する流れを示します。  &lt;/p&gt;

&lt;p&gt;WebSocketを使うと、Webアプリケーションで、&lt;br&gt;
サーバ・クライアント間でリアルタイムな双方向通信を行うことが出来ます。&lt;br&gt;
Pusherというサービスを使うと、&lt;br&gt;
WebSocketに対応したサーバを自前で用意しなくても、&lt;br&gt;
お手軽にWebSocketを使用する事ができるので、&lt;br&gt;
Railsと組み合わせて、簡単なチャットアプリを作ってみます。  &lt;/p&gt;

&lt;p&gt;Pusher&lt;br&gt;
&lt;a href=&quot;http://pusher.com&quot;&gt;&lt;a href=&quot;http://pusher.com&quot;&gt;http://pusher.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このエントリで作成したソースコードはgithubに上げています。&lt;br&gt;
&lt;a href=&quot;https://github.com/takemikami/chat_rails_pusher_sample&quot;&gt;&lt;a href=&quot;https://github.com/takemikami/chat_rails_pusher_sample&quot;&gt;https://github.com/takemikami/chat_rails_pusher_sample&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;作成するアプリの概要&lt;/h1&gt;

&lt;p&gt;作成するアプリは以下の流れで、&lt;br&gt;
チャットのメッセージを送信し、ページに表示することとします。  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ブラウザからメッセージ送信&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Railsサーバで受信、PusherにPush通知依頼&lt;br&gt;&lt;/li&gt;
&lt;li&gt;PusherからブラウザにPush通知&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Push通知を受けて、メッセージを表示領域に即時表示&lt;br&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/62769571@N03/15034779635&quot; title=&quot;View &#39;chat_rails_pusher_1&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;375&quot; title=&quot;chat_rails_pusher_1&quot; alt=&quot;chat_rails_pusher_1&quot; border=&quot;0&quot; src=&quot;https://farm4.staticflickr.com/3849/15034779635_0597b39a56.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下の流れでアプリを作っていきます。&lt;br&gt;
・Puhserのアカウントとアプリケーションを作る&lt;br&gt;
・既定の状態のRailsアプリを作る&lt;br&gt;
・チャット画面の枠組みを作る&lt;br&gt;
・サーバサイドの機能を組み込む&lt;br&gt;
・クライアントサイドの機能を組み込む&lt;br&gt;
・チャットの動作確認を行う&lt;br&gt;
・Pusherのキー情報を設定ファイルに移動させる  &lt;/p&gt;

&lt;h1&gt;Pusherのアカウントとアプリケーションを作る&lt;/h1&gt;

&lt;p&gt;まずは、Pusherのアカウントとアプリを作成していきます。  &lt;/p&gt;

&lt;p&gt;Pusherのサイトにアクセスする。  &lt;/p&gt;

&lt;p&gt;Pusher&lt;br&gt;
&lt;a href=&quot;http://pusher.com&quot;&gt;&lt;a href=&quot;http://pusher.com&quot;&gt;http://pusher.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「Create a Free Account」から手順に従って、アカウント作成。&lt;br&gt;
アカウントを作成したら、以下からログインして、Dashbordを表示します。  &lt;/p&gt;

&lt;p&gt;Pusher: Dashboard&lt;br&gt;
&lt;a href=&quot;https://app.pusher.com/accounts/sign_in&quot;&gt;&lt;a href=&quot;https://app.pusher.com/accounts/sign_in&quot;&gt;https://app.pusher.com/accounts/sign_in&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your Appsで「+ New app」ボタンを押し、&lt;br&gt;
「chat_rails_pusher_sample」という名称を指定して、&lt;br&gt;
「Create app」を押し、アプリを作成します。  &lt;/p&gt;

&lt;p&gt;アプリ作成後の画面では、&lt;br&gt;
「Code examples」が表示され、&lt;br&gt;
クライアント側のJavascriptと、&lt;br&gt;
サーバ側の各種言語のサンプルが確認できます。  &lt;/p&gt;

&lt;p&gt;後ほどの手順では、&lt;br&gt;
ここに表示されるサンプルをコピーして使用していきます。  &lt;/p&gt;

&lt;h1&gt;既定の状態のRailsアプリを作る&lt;/h1&gt;

&lt;p&gt;ひとまず、既定の状態のRailsアプリを用意します。  &lt;/p&gt;

&lt;p&gt;次のコマンドでRailsアプリ用のディレクトリを作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir chat_rails_pusher_sample
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;chat_rails_pusher_sample
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のとおり「Gemfile」を作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://rubygems.org&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rails&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のコマンドでrailsをインストール、Railsアプリを作成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails new .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のコマンドで、開発用Webサーバを起動します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ブラウザで「&lt;a href=&quot;http://127.0.0.1:3000/%E3%80%8D%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%80%81&quot;&gt;http://127.0.0.1:3000/」を表示し、&lt;/a&gt;&lt;br&gt;
RailsのWelcomeが表示されていることを確認。  &lt;/p&gt;

&lt;h1&gt;チャット画面の枠組みを作る&lt;/h1&gt;

&lt;p&gt;次に、チャット画面を枠組みを作ります。  &lt;/p&gt;

&lt;p&gt;次のコマンドで、メインのコントローラーを作成。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails g controller chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「config/routes.rb」に、&lt;br&gt;
チャットのメイン画面のルート、メッセージの送信先ルートを設定します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;chat#index&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;post&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;chat#post&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;****&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;省略&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「app/views/chat/index.html.erb」を編集し、&lt;br&gt;
チャットのメイン画面の枠組みをつくります。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= form_tag(&amp;#39;/post&amp;#39;, :remote =&amp;gt; true) do %&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= text_field_tag &amp;#39;message&amp;#39; %&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= submit_tag &amp;#39;send&amp;#39; %&amp;gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;messagelog&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前半のform_tagが、メッセージの送信用フォーム&lt;br&gt;
後半のdivタグが、メッセージの表示領域です。  &lt;/p&gt;

&lt;h1&gt;サーバサイドの機能を組み込む&lt;/h1&gt;

&lt;p&gt;次にサーバサイド側の機能を組み込んでいきます。  &lt;/p&gt;

&lt;p&gt;pusherのライブラリを使うので、「Gemfile」に以下を追記します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pusher&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のコマンドで、先ほど追記したpusherのgemをインストール。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PusherのDashbordからRails用のコードを確認します。&lt;br&gt;
Dashbordに表示されているサンプルコードを元に、&lt;br&gt;
以下のように「config/initializers/pusher.rb」を作成。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pusher&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://&amp;lt;あなたのaccess_key&amp;gt;:&amp;lt;あなたのaccess_key_secret&amp;gt;@api.pusherapp.com/apps/&amp;lt;あなたのapp_id&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gem追加とinitializer配下を修正したので、&lt;br&gt;
ここで、railsのWebサーバは再起動しておきます。  &lt;/p&gt;

&lt;p&gt;以下のように「app/controllers/chat_controller.rb」を編集します。&lt;br&gt;
ここでは、ブラウザからpostされたメッセージを受け付け、&lt;br&gt;
そのメッセージ情報をpush送信するように、pusherに依頼を行っています。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChatController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;general_channel&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chat_event&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;OK&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;クライアントサイドの機能を組み込む&lt;/h1&gt;

&lt;p&gt;ここまでで、&lt;br&gt;
1. ブラウザからメッセージ送信&lt;br&gt;
2. Railsサーバで受信、PusherにPush通知依頼&lt;br&gt;
3. PusherからブラウザにPush通知&lt;br&gt;
まで実装できたので、&lt;br&gt;
次は、ブラウザ側でPush通知を受け付け、&lt;br&gt;
メッセージ表示領域に追記する部分を実装します。  &lt;/p&gt;

&lt;p&gt;PusherのDashbordのクライアント側サンプルコードを元に、&lt;br&gt;
以下のように「app/views/chat/index.html.erb」に処理を追記。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;//js.pusher.com/2.2/pusher.min.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Enable pusher logging - don&amp;#39;t include this in production&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pusher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;あなたのaccess_key&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;general_channel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;chat_event&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messagelog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;messagelog&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messagediv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;messagediv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;messagelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messagediv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

**** 省略 ****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;チャットの動作確認を行う&lt;/h1&gt;

&lt;p&gt;ここまでで、チャットアプリの流れは完成したので、動作確認を行います。&lt;br&gt;
２つのブラウザを起動し、&lt;br&gt;
両方のブラウザで「&lt;a href=&quot;http://127.0.0.1:3000/%E3%80%8D%E3%82%92%E9%96%8B%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82&quot;&gt;http://127.0.0.1:3000/」を開きます。&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;一方でメッセージを入力し送信すると、&lt;br&gt;
即時に両方にメッセージが追記されることが確認出来るはずです。  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/62769571@N03/15031721821&quot; title=&quot;View &#39;chat_rails_pusher_2&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;258&quot; title=&quot;chat_rails_pusher_2&quot; alt=&quot;chat_rails_pusher_2&quot; border=&quot;0&quot; src=&quot;https://farm6.staticflickr.com/5573/15031721821_6a58c09530.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Pusherのキー情報を設定ファイルに移動させる&lt;/h1&gt;

&lt;p&gt;Pusherのキー情報がソースコードべた書きなのが気持ち悪いので、&lt;br&gt;
最後にキー情報を設定ファイルに移動させておきます。  &lt;/p&gt;

&lt;p&gt;次のように「config/pusher.yml」を作成。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;development:
app_id: &amp;lt;あなたのapp_id&amp;gt;
access_key: &amp;lt;あなたのaccess_key&amp;gt;
access_key_secret: &amp;lt;あなたのaccess_key_secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のとおり「config/initializer/pusher.rb」を修正。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pusher&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;config/pusher.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;access_key_secret&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@api.pusherapp.com/apps/{config_pusher[&amp;#39;app_id&amp;#39;]}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のとおり「app/controllers/chat_controller.rb」を修正。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ChatController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;config/pusher.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@pusher_access_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_pusher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;****&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;省略&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;****&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のとおり「app/views/chat/index.html.erb」を修正。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;**** 省略 ****
var pusher = new Pusher(&amp;#39;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= @pusher_access_key %&amp;gt;&amp;#39;);
**** 省略 ****
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上。。  &lt;/p&gt;
</description>
        <pubDate>Tue, 26 Aug 2014 04:08:10 +0900</pubDate>
        <link>http://takemikami.com/archives/1518</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1518</guid>
        
        <category>pusher</category>
        
        <category>rails4</category>
        
        <category>websocket</category>
        
        
        <category>it技術</category>
        
      </item>
    
      <item>
        <title>MacOSXでAngularJS開発環境を構築する手順</title>
        <description>&lt;p&gt;MacOSXでAngularJSでの開発環境を構築したので、&lt;br&gt;
その手順のメモを残します。  &lt;/p&gt;

&lt;p&gt;AngularJS:&lt;br&gt;
&lt;a href=&quot;https://angularjs.org&quot;&gt;&lt;a href=&quot;https://angularjs.org&quot;&gt;https://angularjs.org&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全体の流れは、次のとおり。&lt;br&gt;
1. nodebrewのインストール&lt;br&gt;
2. nodeのインストール&lt;br&gt;
3. grunt-cli, yo, bower, generator-angularのインストール&lt;br&gt;
4. compassのインストール&lt;br&gt;
5. AngularJSアプリのテンプレート生成  &lt;/p&gt;

&lt;h1&gt;nodebrewのインストール&lt;/h1&gt;

&lt;p&gt;まず、nodeのversion管理ツールとしてnodebrewをインストールします。&lt;br&gt;
# 世間にはいくつかnodeのversion管理ツールがあるようですが、&lt;br&gt;
# なんとなくactiveっぽいので、ここではnodebrewを選びました。  &lt;/p&gt;

&lt;p&gt;nodebrew:&lt;br&gt;
&lt;a href=&quot;https://github.com/hokaccha/nodebrew&quot;&gt;&lt;a href=&quot;https://github.com/hokaccha/nodebrew&quot;&gt;https://github.com/hokaccha/nodebrew&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下の手順は、基本的に公式サイトの手順通りです。&lt;br&gt;
次のコマンドでインストール実行。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -L git.io/nodebrew &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; perl - setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「~/.bash_profile」に以下を追記して、パスを設定。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.nodebrew/current/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、パス設定を読み込む。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、パスが通っている事を確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;nodeのインストール&lt;/h1&gt;

&lt;p&gt;次は、nodebrewを使って、nodeをインストールします。  &lt;/p&gt;

&lt;p&gt;まずは、以下のコマンドで、利用可能なnodeのバージョンを確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew ls-remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;表示されたバージョンの中から、インストールしたいバージョンを指定して、&lt;br&gt;
nodeのインストールを実行。&lt;br&gt;
ここでは、最新の「v0.11.13」を指定します。&lt;br&gt;
# しばらく時間がかかります。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew install v0.11.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでインストールされたことを確認。&lt;br&gt;
# インストールしたnodeのバージョンが表示されるはずです。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、利用するnodeのバージョンを指定します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nodebrew  use v0.11.13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドで、指定したバージョンが有効になっている事を確認。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;grunt-cli, yo, bower, generator-angularのインストール&lt;/h1&gt;

&lt;p&gt;以下のコマンドで、AngularJSの開発に利用する各種ツールをインストールします。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g grunt-cli
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g bower
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;インストールしたツールのサイトはそれぞれ、以下の通り。  &lt;/p&gt;

&lt;p&gt;Grunt:&lt;br&gt;
&lt;a href=&quot;http://gruntjs.com&quot;&gt;&lt;a href=&quot;http://gruntjs.com&quot;&gt;http://gruntjs.com&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeoman:&lt;br&gt;
&lt;a href=&quot;http://yeoman.io&quot;&gt;&lt;a href=&quot;http://yeoman.io&quot;&gt;http://yeoman.io&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bower:&lt;br&gt;
&lt;a href=&quot;http://bower.io&quot;&gt;&lt;a href=&quot;http://bower.io&quot;&gt;http://bower.io&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;compassのインストール&lt;/h1&gt;

&lt;p&gt;この手順では、sass/scssを利用するので、&lt;br&gt;
以下のコマンドでcompassをインストールしておきます。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install compass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;AngularJSアプリのテンプレート生成&lt;/h1&gt;

&lt;p&gt;以下のコマンドで、AngularJSの開発のテンプレートを生成するツールをインストールします。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install generator-angular
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のコマンドでAngularJSアプリケーションのテンプレートを生成します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir ngapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ngapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo angular ngapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成時にいろいろ聞かれますが、ひとまず全て既定値で回答しておきます。  &lt;/p&gt;

&lt;p&gt;生成が終わったら、以下のコマンドで開発用のWebサーバを起動します。  &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;既定のブラウザが開き、&lt;br&gt;
次のような画面が表示されれば、テンプレート作成OKです。  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flickr.com/photos/62769571@N03/15027881561&quot; title=&quot;View &#39;angularjs01&#39; on Flickr.com&quot;&gt;&lt;img height=&quot;324&quot; title=&quot;angularjs01&quot; alt=&quot;angularjs01&quot; border=&quot;0&quot; src=&quot;https://farm6.staticflickr.com/5581/15027881561_c81342553f.jpg&quot; width=&quot;500&quot;/&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;# 本番はここからですけどね  &lt;/p&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 21:42:57 +0900</pubDate>
        <link>http://takemikami.com/archives/1516</link>
        <guid isPermaLink="true">http://takemikami.com/archives/1516</guid>
        
        <category>AngularJS</category>
        
        <category>javascript</category>
        
        <category>nodejs</category>
        
        
        <category>it技術</category>
        
      </item>
    
  </channel>
</rss>
